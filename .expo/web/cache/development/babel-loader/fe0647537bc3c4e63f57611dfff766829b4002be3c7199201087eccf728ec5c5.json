{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Text, Checkbox } from 'react-native-paper';\nimport { useCallback, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { memo } from 'react';\nimport { set } from 'lodash';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar CheckboxMe = function CheckboxMe() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isCheck = _useState2[0],\n    setIsCheck = _useState2[1];\n  return _jsx(TouchableOpacity, {\n    style: {\n      borderWidth: 1,\n      width: 5,\n      height: 5\n    },\n    onPress: function onPress() {\n      return setIsCheck(!isCheck);\n    },\n    children: isCheck ? _jsx(Icon, {\n      name: \"gear\",\n      size: 20,\n      color: \"blue\"\n    }) : _jsx(_Fragment, {})\n  });\n};\nexport { CheckboxMe };","map":{"version":3,"names":["Text","Checkbox","useCallback","useState","View","FlatList","TouchableOpacity","memo","set","Icon","jsx","_jsx","Fragment","_Fragment","CheckboxMe","_useState","_useState2","_slicedToArray","isCheck","setIsCheck","style","borderWidth","width","height","onPress","children","name","size","color"],"sources":["/home/gabriel/repos/jxt-korennumi/components/used/TextConfig/CheckBox.js"],"sourcesContent":["import { Text, Checkbox } from 'react-native-paper';\nimport { useCallback, useState } from 'react';\nimport { View, FlatList } from 'react-native';\nimport { TouchableOpacity } from 'react-native';\nimport { memo } from 'react';\nimport { set } from 'lodash';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nconst CheckboxMe = (() => {\n  const [isCheck, setIsCheck] = useState(false)\n\n\n  return (\n    <TouchableOpacity style={{ borderWidth: 1, width: 5, height: 5 }} onPress={() => setIsCheck(!isCheck)}>\n      {isCheck ? <Icon name=\"gear\" size={20} color=\"blue\" /> : <></>}\n    </TouchableOpacity>\n  );\n});\n\nexport { CheckboxMe }\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,oBAAoB;AACnD,SAASC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,gBAAA;AAG9C,SAASC,IAAI,QAAQ,OAAO;AAC5B,SAASC,GAAG,QAAQ,QAAQ;AAC5B,OAAOC,IAAI;AAA8C,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACzD,IAAMC,UAAU,GAAI,SAAdA,UAAUA,CAAA,EAAU;EACxB,IAAAC,SAAA,GAA8BZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAG1B,OACEL,IAAA,CAACL,gBAAgB;IAACc,KAAK,EAAE;MAAEC,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAE;IAACC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAML,UAAU,CAAC,CAACD,OAAO,CAAC;IAAA,CAAC;IAAAO,QAAA,EACnGP,OAAO,GAAGP,IAAA,CAACF,IAAI;MAACiB,IAAI,EAAC,MAAM;MAACC,IAAI,EAAE,EAAG;MAACC,KAAK,EAAC;IAAM,EAAG,GAAGjB,IAAA,CAAAE,SAAA;EAAK,EAC7C;AAEvB,CAAE;AAEF,SAASC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}