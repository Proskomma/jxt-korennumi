{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Text, Checkbox } from 'react-native-paper';\nimport { useCallback, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { memo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction ChapitreSelection(_ref) {\n  var _chapters$data$docSet;\n  var pk = _ref.pk,\n    bible = _ref.bible,\n    livre = _ref.livre,\n    chapitre = _ref.chapitre,\n    setChapitre = _ref.setChapitre;\n  var _useState = useState(chapitre || []),\n    _useState2 = _slicedToArray(_useState, 2),\n    checked = _useState2[0],\n    setChecked = _useState2[1];\n  if (livre === 'null' || bible === 'null') {\n    return _jsx(Text, {\n      children: \"Can't display\"\n    });\n  }\n  var chapters = pk.gqlQuerySync(\"{\\n      docSet(id: \\\"\" + bible + \"\\\") {\\n        document(bookCode: \\\"\" + livre + \"\\\") {\\n          cvIndexes {\\n            chapter\\n          }\\n        }\\n      }\\n    }\");\n  var chaptersData = ((_chapters$data$docSet = chapters.data.docSet.document) == null ? void 0 : _chapters$data$docSet.cvIndexes) || [];\n  var toggleChapter = function toggleChapter(chapter) {\n    setChecked(function (prevChecked) {\n      return prevChecked.includes(chapter) ? prevChecked.filter(function (c) {\n        return c !== chapter;\n      }) : [].concat(_toConsumableArray(prevChecked), [chapter]);\n    });\n  };\n  var renderItem = useCallback(function (_ref2) {\n    var item = _ref2.item;\n    return _jsx(ChapterItem, {\n      chapter: item.chapter,\n      isChecked: checked.includes(\"\" + item.chapter),\n      toggleChapter: toggleChapter\n    });\n  }, [checked]);\n  var keyExtractor = useCallback(function (item) {\n    return \"chap-\" + item.chapter;\n  }, []);\n  return chaptersData.length > 0 ? _jsx(FlatList, {\n    data: chaptersData,\n    numColumns: 5,\n    keyExtractor: keyExtractor,\n    renderItem: renderItem\n  }) : _jsx(Text, {\n    children: \"Can't display\"\n  });\n}\nvar ChapterItem = memo(function (_ref3) {\n  var chapter = _ref3.chapter,\n    isChecked = _ref3.isChecked,\n    toggleChapter = _ref3.toggleChapter;\n  return _jsxs(View, {\n    style: {\n      flexDirection: 'column',\n      width: 50\n    },\n    children: [_jsx(Text, {\n      style: {\n        alignSelf: 'center'\n      },\n      children: chapter\n    }), _jsx(View, {\n      style: {\n        alignSelf: 'center'\n      },\n      children: _jsx(Checkbox, {\n        style: {\n          alignSelf: 'center'\n        },\n        value: chapter,\n        status: isChecked ? 'checked' : 'unchecked',\n        onPress: function onPress() {\n          return toggleChapter(\"\" + chapter);\n        }\n      })\n    })]\n  });\n});\nexport { ChapitreSelection };","map":{"version":3,"names":["Text","Checkbox","useCallback","useState","View","FlatList","memo","jsx","_jsx","jsxs","_jsxs","ChapitreSelection","_ref","_chapters$data$docSet","pk","bible","livre","chapitre","setChapitre","_useState","_useState2","_slicedToArray","checked","setChecked","children","chapters","gqlQuerySync","chaptersData","data","docSet","document","cvIndexes","toggleChapter","chapter","prevChecked","includes","filter","c","concat","_toConsumableArray","renderItem","_ref2","item","ChapterItem","isChecked","keyExtractor","length","numColumns","_ref3","style","flexDirection","width","alignSelf","value","status","onPress"],"sources":["/home/gabriel/repos/jxt-korennumi/components/proofOfConcept/ChapitreSelection.js"],"sourcesContent":["import { Text, Checkbox } from 'react-native-paper';\nimport { useCallback, useState } from 'react';\nimport { View, FlatList } from 'react-native';\nimport { memo } from 'react';\nfunction ChapitreSelection({ pk, bible, livre, chapitre, setChapitre }) {\n  const [checked, setChecked] = useState(chapitre || []);\n\n  if (livre === 'null' || bible === 'null') {\n    return <Text>{`Can't display`}</Text>\n  }\n\n  let chapters = pk.gqlQuerySync(\n    `{\n      docSet(id: \"${bible}\") {\n        document(bookCode: \"${livre}\") {\n          cvIndexes {\n            chapter\n          }\n        }\n      }\n    }`);\n\n  const chaptersData = chapters.data.docSet.document?.cvIndexes || [];\n\n  const toggleChapter = (chapter) => {\n    setChecked(prevChecked =>\n      prevChecked.includes(chapter)\n        ? prevChecked.filter(c => c !== chapter)\n        : [...prevChecked, chapter]\n    );\n  }\n\n  const renderItem = useCallback(({ item }) => (\n    <ChapterItem\n      chapter={item.chapter}\n      isChecked={checked.includes(`${item.chapter}`)}\n      toggleChapter={toggleChapter}\n    />\n  ), [checked]);\n\n  const keyExtractor = useCallback((item) => `chap-${item.chapter}`, []);\n\n  return chaptersData.length > 0 ? (\n    <FlatList\n      data={chaptersData}\n      numColumns={5}\n      keyExtractor={keyExtractor}\n      renderItem={renderItem}/>\n  ) : (\n    <Text>{`Can't display`}</Text>\n  );\n}\n\nconst ChapterItem = memo(({ chapter, isChecked, toggleChapter }) => (\n  <View style={{ flexDirection: 'column', width: 50 }}>\n    <Text style={{ alignSelf: 'center' }}>{chapter}</Text>\n    <View style={{ alignSelf: 'center' }}>\n      <Checkbox\n        style={{ alignSelf: 'center' }}\n        value={chapter}\n        status={isChecked ? 'checked' : 'unchecked'}\n        onPress={() => toggleChapter(`${chapter}`)} />\n    </View>\n  </View>\n));\n\nexport { ChapitreSelection }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}