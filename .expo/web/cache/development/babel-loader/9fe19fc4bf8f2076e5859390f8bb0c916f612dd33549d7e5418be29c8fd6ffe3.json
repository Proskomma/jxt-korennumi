{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar ProskommaRender = require(\"./ProskommaRender\");\nvar camelCaseToSnakeCase = function camelCaseToSnakeCase(s) {\n  var ret = [];\n  for (var c of s.split(\"\")) {\n    if (c.toUpperCase() === c && c.toLowerCase() !== c) {\n      ret.push(\"_\" + c.toLowerCase());\n    } else {\n      ret.push(c);\n    }\n  }\n  return ret.join(\"\");\n};\nvar SofriaRenderFromProskomma2 = function (_ProskommaRender) {\n  _inherits(SofriaRenderFromProskomma2, _ProskommaRender);\n  var _super = _createSuper(SofriaRenderFromProskomma2);\n  function SofriaRenderFromProskomma2(spec) {\n    var _this;\n    _classCallCheck(this, SofriaRenderFromProskomma2);\n    _this = _super.call(this, spec);\n    if (!spec.proskomma) {\n      throw new Error(\"No Proskomma\");\n    }\n    _this.pk = spec.proskomma;\n    _this._tokens = [];\n    _this._container = null;\n    _this.cachedSequenceIds = [];\n    _this.sequences = null;\n    _this.currentCV = {\n      chapter: null,\n      verses: null\n    };\n    return _this;\n  }\n  _createClass(SofriaRenderFromProskomma2, [{\n    key: \"renderDocument1\",\n    value: function renderDocument1(_ref) {\n      var docId = _ref.docId,\n        config = _ref.config,\n        context = _ref.context,\n        workspace = _ref.workspace,\n        output = _ref.output;\n      var environment = {\n        config: config,\n        context: context,\n        workspace: workspace,\n        output: output\n      };\n      context.renderer = this;\n      var documentResult = this.pk.gqlQuerySync(\"{\\n          document(id: \\\"\" + docId + \"\\\") {\\n            docSetId\\n            mainSequence { id }\\n            nSequences\\n            sequences {\\n              id\\n              type\\n              nBlocks\\n            }\\n            headers {\\n              key\\n              value\\n            }\\n          } \\n        }\");\n      var docSetId = documentResult.data.document.docSetId;\n      var mainId = documentResult.data.document.mainSequence.id;\n      var nSequences = documentResult.data.document.nSequences;\n      this.sequences = {};\n      for (var seq of documentResult.data.document.sequences) {\n        this.sequences[seq.id] = seq;\n      }\n      var headers = {};\n      for (var header of documentResult.data.document.headers) {\n        headers[header.key] = header.value;\n      }\n      var docSetResult = this.pk.gqlQuerySync(\"{docSet(id: \\\"\" + docSetId + \"\\\") {selectors {key value}}}\");\n      var selectors = {};\n      for (var selector of docSetResult.data.docSet.selectors) {\n        selectors[selector.key] = selector.value;\n      }\n      context.document = {\n        id: docId,\n        schema: {\n          \"structure\": \"nested\",\n          \"structure_version\": \"0.2.1\",\n          \"constraints\": [{\n            \"name\": \"sofria\",\n            \"version\": \"0.2.1\"\n          }]\n        },\n        metadata: {\n          translation: {\n            id: docSetId,\n            selectors: selectors,\n            properties: {},\n            tags: []\n          },\n          document: _objectSpread(_objectSpread({}, headers), {}, {\n            properties: {},\n            tags: []\n          })\n        },\n        mainSequenceId: mainId,\n        nSequences: nSequences\n      };\n      if (config.chapters) {\n        context.document.metadata.document.properties.chapters = config.chapters[0];\n      }\n      context.sequences = [];\n      this.renderEvent('startDocument', environment);\n      this.cachedSequenceIds.unshift(mainId);\n      console.log(mainId);\n      this.renderSequence(environment, 2, 8);\n      this.cachedSequenceIds.shift();\n      this.renderEvent('endDocument', environment);\n    }\n  }, {\n    key: \"renderOtherPartOfDocument\",\n    value: function renderOtherPartOfDocument(_ref2) {\n      var docId = _ref2.docId,\n        config = _ref2.config,\n        context = _ref2.context,\n        workspace = _ref2.workspace,\n        output = _ref2.output;\n      var environment = {\n        config: config,\n        context: context,\n        workspace: workspace,\n        output: output\n      };\n      context.renderer = this;\n      var documentResult = this.pk.gqlQuerySync(\"{\\n          document(id: \\\"\" + docId + \"\\\") {\\n            docSetId\\n            mainSequence { id }\\n            nSequences\\n            sequences {\\n              id\\n              type\\n              nBlocks\\n            }\\n            headers {\\n              key\\n              value\\n            }\\n          } \\n        }\");\n      var docSetId = documentResult.data.document.docSetId;\n      var mainId = documentResult.data.document.mainSequence.id;\n      var nSequences = documentResult.data.document.nSequences;\n      this.sequences = {};\n      for (var seq of documentResult.data.document.sequences) {\n        this.sequences[seq.id] = seq;\n      }\n      var headers = {};\n      for (var header of documentResult.data.document.headers) {\n        headers[header.key] = header.value;\n      }\n      var docSetResult = this.pk.gqlQuerySync(\"{docSet(id: \\\"\" + docSetId + \"\\\") {selectors {key value}}}\");\n      var selectors = {};\n      for (var selector of docSetResult.data.docSet.selectors) {\n        selectors[selector.key] = selector.value;\n      }\n      context.document = {\n        id: docId,\n        schema: {\n          \"structure\": \"nested\",\n          \"structure_version\": \"0.2.1\",\n          \"constraints\": [{\n            \"name\": \"sofria\",\n            \"version\": \"0.2.1\"\n          }]\n        },\n        metadata: {\n          translation: {\n            id: docSetId,\n            selectors: selectors,\n            properties: {},\n            tags: []\n          },\n          document: _objectSpread(_objectSpread({}, headers), {}, {\n            properties: {},\n            tags: []\n          })\n        },\n        mainSequenceId: mainId,\n        nSequences: nSequences\n      };\n      if (config.chapters) {\n        context.document.metadata.document.properties.chapters = config.chapters[0];\n      }\n      context.sequences = [];\n      this.renderEvent('startDocument', environment);\n      this.cachedSequenceIds.unshift(mainId);\n      console.log(mainId);\n      this.renderSequence(environment, 2, 8);\n      this.cachedSequenceIds.shift();\n      this.renderEvent('endDocument', environment);\n    }\n  }, {\n    key: \"testAddingSequence\",\n    value: function testAddingSequence(mainId, environment, fromId, toId) {\n      this.cachedSequenceIds.unshift(mainId);\n      this.renderSequence(environment, fromId, toId);\n      this.cachedSequenceIds.shift();\n    }\n  }, {\n    key: \"sequenceContext\",\n    value: function sequenceContext(sequence, sequenceId) {\n      return {\n        id: sequenceId,\n        type: camelCaseToSnakeCase(sequence.type),\n        nBlocks: sequence.nBlocks,\n        milestones: new Set([])\n      };\n    }\n  }, {\n    key: \"renderSequence\",\n    value: function renderSequence(environment, fromBlockNumber, toBlockNumber) {\n      var context = environment.context;\n      var sequenceId = this.cachedSequenceIds[0];\n      var documentResult = this.pk.gqlQuerySync(\"{document(id: \\\"\" + context.document.id + \"\\\") {sequence(id:\\\"\" + sequenceId + \"\\\") {id type nBlocks blocks { os {payload} is {payload} } } } }\");\n      var sequence = documentResult.data.document.sequence;\n      console.log(sequence);\n      console.log(sequence.nBlocks);\n      if (!sequence) {\n        throw new Error(\"Sequence '\" + sequenceId + \"' not found in renderSequenceId()\");\n      }\n      context.sequences.unshift(this.sequenceContext(sequence, sequenceId));\n      console.lo;\n      this.renderEvent('startSequence', environment);\n      var outputBlockN = 0;\n      var nbForLoop = 0;\n      var initBlockNumber = 0;\n      if (sequence.type === 'main') {\n        nbForLoop = toBlockNumber;\n        initBlockNumber = fromBlockNumber;\n      } else {\n        nbForLoop = sequence.nBlocks;\n      }\n      for (var inputBlockN = initBlockNumber; inputBlockN < nbForLoop; inputBlockN++) {\n        if (environment.config.chapters && sequence.type === \"main\") {\n          var chapterScopes = [].concat(_toConsumableArray(sequence.blocks[inputBlockN].os.map(function (s) {\n            return s.payload;\n          })), _toConsumableArray(sequence.blocks[inputBlockN].is.map(function (s) {\n            return s.payload;\n          }))).filter(function (s) {\n            return ['chapter'].includes(s.split('/')[0]);\n          }).map(function (s) {\n            return s.split('/')[1];\n          });\n          if (chapterScopes.length === 0 || !environment.config.chapters.includes(chapterScopes[0])) {\n            continue;\n          }\n        }\n        var blocksResult = this.pk.gqlQuerySync(\"{\\n               document(id: \\\"\" + context.document.id + \"\\\") {\\n                 sequence(id:\\\"\" + sequenceId + \"\\\") {\\n                   blocks(positions:\" + inputBlockN + \") {\\n                     bg {subType payload}\\n                     bs {payload}\\n                     items {type subType payload}\\n                   }\\n                 }\\n               }\\n             }\");\n        var blockResult = blocksResult.data.document.sequence.blocks[0];\n        for (var blockGraft of blockResult.bg) {\n          context.sequences[0].block = {\n            type: \"graft\",\n            subType: camelCaseToSnakeCase(blockGraft.subType),\n            blockN: outputBlockN,\n            sequence: this.sequences[blockGraft.payload]\n          };\n          this.cachedSequenceIds.unshift(blockGraft.payload);\n          this.renderEvent('blockGraft', environment);\n          this.cachedSequenceIds.shift();\n          outputBlockN++;\n        }\n        var subTypeValues = blockResult.bs.payload.split('/');\n        var subTypeValue = subTypeValues[1] ? \"usfm:\" + subTypeValues[1] : subTypeValues[0];\n        context.sequences[0].block = {\n          type: \"paragraph\",\n          subType: subTypeValue,\n          blockN: outputBlockN,\n          wrappers: []\n        };\n        this.renderEvent('startParagraph', environment);\n        this._tokens = [];\n        if (sequence.type === \"main\" && this.currentCV.chapter) {\n          var wrapper = {\n            type: \"wrapper\",\n            subType: 'chapter',\n            atts: {\n              number: this.currentCV.chapter\n            }\n          };\n          environment.context.sequences[0].element = wrapper;\n          environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n          this.renderEvent('startWrapper', environment);\n        }\n        if (sequence.type === \"main\" && this.currentCV.verses) {\n          var _wrapper = {\n            type: \"wrapper\",\n            subType: 'verses',\n            atts: {\n              number: this.currentCV.verses\n            }\n          };\n          environment.context.sequences[0].element = _wrapper;\n          environment.context.sequences[0].block.wrappers.unshift(_wrapper.subType);\n          this.renderEvent('startWrapper', environment);\n        }\n        this.renderContent(blockResult.items, environment);\n        this._tokens = [];\n        if (sequence.type === \"main\" && this.currentCV.verses) {\n          var _wrapper2 = {\n            type: \"wrapper\",\n            subType: 'verses',\n            atts: {\n              number: this.currentCV.verses\n            }\n          };\n          environment.context.sequences[0].element = _wrapper2;\n          environment.context.sequences[0].block.wrappers.shift();\n          this.renderEvent('endWrapper', environment);\n        }\n        if (sequence.type === \"main\" && this.currentCV.chapter) {\n          var _wrapper3 = {\n            type: \"wrapper\",\n            subType: 'chapter',\n            atts: {\n              number: this.currentCV.chapter\n            }\n          };\n          environment.context.sequences[0].element = _wrapper3;\n          environment.context.sequences[0].block.wrappers.shift();\n          this.renderEvent('endWrapper', environment);\n        }\n        this.renderEvent('endParagraph', environment);\n        delete context.sequences[0].block;\n        outputBlockN++;\n      }\n      this.renderEvent('endSequence', environment);\n      context.sequences.shift();\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(items, environment) {\n      for (var item of items) {\n        this.renderItem(item, environment);\n      }\n      this.maybeRenderText(environment);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item, environment) {\n      if (item.type === 'scope' && item.payload.startsWith('attribute')) {\n        var scopeBits = item.payload.split('/');\n        if (item.subType === \"start\") {\n          if (!this._container) {\n            this._container = {\n              direction: \"start\",\n              subType: \"usfm:w\",\n              type: \"wrapper\",\n              atts: {}\n            };\n          }\n          if (scopeBits[3] in this._container.atts) {\n            this._container.atts[scopeBits[3]].push(scopeBits[5]);\n          } else {\n            this._container.atts[scopeBits[3]] = [scopeBits[5]];\n          }\n        } else {\n          if (!this._container) {\n            this._container = {\n              direction: \"end\",\n              subType: \"usfm:\" + camelCaseToSnakeCase(scopeBits[2])\n            };\n            if (scopeBits[1] === 'milestone') {\n              this._container.type = \"end_milestone\";\n            } else {\n              this._container.type = \"wrapper\";\n              this._container.atts = {};\n            }\n          }\n        }\n      } else {\n        if (this._container) {\n          this.maybeRenderText(environment);\n          this.renderContainer(environment);\n        }\n        if (item.type === 'token') {\n          this._tokens.push(item.payload.replace(/\\s+/g, \" \"));\n        } else if (item.type === \"graft\") {\n          this.maybeRenderText(environment);\n          var graft = {\n            type: \"graft\",\n            subType: camelCaseToSnakeCase(item.subType),\n            sequence: this.sequences[item.payload]\n          };\n          environment.context.sequences[0].element = graft;\n          this.cachedSequenceIds.unshift(item.payload);\n          this.renderEvent('inlineGraft', environment);\n          this.cachedSequenceIds.shift();\n          delete environment.context.sequences[0].element;\n        } else {\n          this.maybeRenderText(environment);\n          var _scopeBits = item.payload.split('/');\n          if ([\"chapter\", \"verses\"].includes(_scopeBits[0])) {\n            var wrapper = {\n              type: \"wrapper\",\n              subType: camelCaseToSnakeCase(_scopeBits[0]),\n              atts: {\n                number: _scopeBits[1]\n              }\n            };\n            environment.context.sequences[0].element = wrapper;\n            if (item.subType === 'start') {\n              this.currentCV[_scopeBits[0]] = _scopeBits[1];\n              environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n              this.renderEvent('startWrapper', environment);\n              var cvMark = {\n                \"type\": \"mark\",\n                \"subType\": _scopeBits[0] + \"_label\",\n                \"atts\": {\n                  \"number\": _scopeBits[1]\n                }\n              };\n              environment.context.sequences[0].element = cvMark;\n              this.renderEvent('mark', environment);\n              environment.context.sequences[0].element = wrapper;\n            } else {\n              this.renderEvent('endWrapper', environment);\n              environment.context.sequences[0].block.wrappers.shift();\n              delete environment.context.sequences[0].element;\n              this.currentCV[_scopeBits[0]] = null;\n            }\n          } else if ([\"pubChapter\", \"pubVerse\", \"altChapter\", \"altVerse\"].includes(_scopeBits[0])) {\n            if (item.subType === 'start') {\n              var mark = {\n                type: \"mark\",\n                subType: camelCaseToSnakeCase(_scopeBits[0]),\n                atts: {\n                  number: _scopeBits[1]\n                }\n              };\n              environment.context.sequences[0].element = mark;\n              this.renderEvent('mark', environment);\n              delete environment.context.sequences[0].element;\n            }\n          } else if (_scopeBits[0] === 'span') {\n            var _wrapper4 = {\n              type: \"wrapper\",\n              subType: \"usfm:\" + _scopeBits[1],\n              atts: {}\n            };\n            environment.context.sequences[0].element = _wrapper4;\n            if (item.subType === 'start') {\n              environment.context.sequences[0].block.wrappers.unshift(_wrapper4.subType);\n              this.renderEvent('startWrapper', environment);\n            } else {\n              this.renderEvent('endWrapper', environment);\n              environment.context.sequences[0].block.wrappers.shift();\n            }\n            delete environment.context.sequences[0].element;\n          } else if (_scopeBits[0] === 'spanWithAtts') {\n            if (item.subType === 'start') {\n              this._container = {\n                direction: \"start\",\n                type: \"wrapper\",\n                subType: \"usfm:\" + _scopeBits[1],\n                atts: {}\n              };\n            }\n          } else if (_scopeBits[0] === 'milestone' && item.subType === \"start\") {\n            if (_scopeBits[1] === 'ts') {\n              var _mark = {\n                type: \"mark\",\n                subType: \"usfm:\" + camelCaseToSnakeCase(_scopeBits[1]),\n                atts: {}\n              };\n              environment.context.sequences[0].element = _mark;\n              this.renderEvent('mark', environment);\n              delete environment.context.sequences[0].element;\n            } else {\n              this._container = {\n                type: \"start_milestone\",\n                subType: \"usfm:\" + camelCaseToSnakeCase(_scopeBits[1]),\n                atts: {}\n              };\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"maybeRenderText\",\n    value: function maybeRenderText(environment) {\n      if (this._tokens.length === 0) {\n        return;\n      }\n      var elementContext = {\n        type: 'text',\n        text: this._tokens.join('')\n      };\n      environment.context.sequences[0].element = elementContext;\n      this._tokens = [];\n      this.renderEvent('text', environment);\n      delete environment.context.sequences[0].element;\n    }\n  }, {\n    key: \"renderContainer\",\n    value: function renderContainer(environment) {\n      if (this._container.type === \"wrapper\") {\n        var direction = this._container.direction;\n        delete this._container.direction;\n        if (direction === 'start') {\n          environment.context.sequences[0].element = this._container;\n          environment.context.sequences[0].block.wrappers.unshift(this._container.subType);\n          this.renderEvent('startWrapper', environment);\n          delete environment.context.sequences[0].element;\n        } else {\n          environment.context.sequences[0].element = this._container;\n          this.renderEvent('endWrapper', environment);\n          environment.context.sequences[0].block.wrappers.shift();\n          delete environment.context.sequences[0].element;\n        }\n      } else if (this._container.type === \"start_milestone\") {\n        environment.context.sequences[0].element = this._container;\n        this.renderEvent('startMilestone', environment);\n        delete environment.context.sequences[0].element;\n      } else if (this._container.type === \"end_milestone\") {\n        environment.context.sequences[0].element = this._container;\n        this.renderEvent('endMilestone', environment);\n        delete environment.context.sequences[0].element;\n      }\n      this._container = null;\n    }\n  }]);\n  return SofriaRenderFromProskomma2;\n}(ProskommaRender);\nexport { SofriaRenderFromProskomma2 };","map":{"version":3,"names":["ProskommaRender","require","camelCaseToSnakeCase","s","ret","c","split","toUpperCase","toLowerCase","push","join","SofriaRenderFromProskomma2","_ProskommaRender","_inherits","_super","_createSuper","spec","_this","_classCallCheck","call","proskomma","Error","pk","_tokens","_container","cachedSequenceIds","sequences","currentCV","chapter","verses","_createClass","key","value","renderDocument1","_ref","docId","config","context","workspace","output","environment","renderer","documentResult","gqlQuerySync","docSetId","data","document","mainId","mainSequence","id","nSequences","seq","headers","header","docSetResult","selectors","selector","docSet","schema","metadata","translation","properties","tags","_objectSpread","mainSequenceId","chapters","renderEvent","unshift","console","log","renderSequence","shift","renderOtherPartOfDocument","_ref2","testAddingSequence","fromId","toId","sequenceContext","sequence","sequenceId","type","nBlocks","milestones","Set","fromBlockNumber","toBlockNumber","lo","outputBlockN","nbForLoop","initBlockNumber","inputBlockN","chapterScopes","concat","_toConsumableArray","blocks","os","map","payload","is","filter","includes","length","blocksResult","blockResult","blockGraft","bg","block","subType","blockN","subTypeValues","bs","subTypeValue","wrappers","wrapper","atts","number","element","renderContent","items","item","renderItem","maybeRenderText","startsWith","scopeBits","direction","renderContainer","replace","graft","cvMark","mark","elementContext","text"],"sources":["/home/gabriel/repos/jxt-korennumi/components/ProskommaRendererTest.js"],"sourcesContent":["const ProskommaRender = require('./ProskommaRender');\n\nconst camelCaseToSnakeCase = s => {\n    const ret = [];\n    for (const c of s.split(\"\")) {\n        if (c.toUpperCase() === c && c.toLowerCase() !== c) {\n            ret.push(`_${c.toLowerCase()}`);\n        } else {\n            ret.push(c);\n        }\n    }\n    return ret.join(\"\");\n}\n\nclass SofriaRenderFromProskomma2 extends ProskommaRender {\n\n    constructor(spec) {\n        super(spec);\n        if (!spec.proskomma) {\n            throw new Error(`No Proskomma`)\n        }\n        this.pk = spec.proskomma;\n        this._tokens = [];\n        this._container = null;\n        this.cachedSequenceIds = [];\n        this.sequences = null;\n        this.currentCV = {\n            chapter: null,\n            verses: null\n        }\n    }\n\n    renderDocument1({docId, config, context, workspace, output}) {\n        const environment = {config, context, workspace, output};\n        context.renderer = this;\n        const documentResult = this.pk.gqlQuerySync(`{\n          document(id: \"${docId}\") {\n            docSetId\n            mainSequence { id }\n            nSequences\n            sequences {\n              id\n              type\n              nBlocks\n            }\n            headers {\n              key\n              value\n            }\n          } \n        }`);\n        const docSetId = documentResult.data.document.docSetId;\n        const mainId = documentResult.data.document.mainSequence.id;\n        const nSequences = documentResult.data.document.nSequences;\n        this.sequences = {};\n        for (const seq of documentResult.data.document.sequences) {\n            this.sequences[seq.id] = seq;\n        }\n        const headers = {};\n        for (const header of documentResult.data.document.headers) {\n            headers[header.key] = header.value;\n        }\n        const docSetResult = this.pk.gqlQuerySync(`{docSet(id: \"${docSetId}\") {selectors {key value}}}`);\n        const selectors = {};\n        for (const selector of docSetResult.data.docSet.selectors) {\n            selectors[selector.key] = selector.value;\n        }\n        context.document = {\n            id: docId,\n            schema: {\n                \"structure\": \"nested\",\n                \"structure_version\": \"0.2.1\",\n                \"constraints\": [\n                    {\n                        \"name\": \"sofria\",\n                        \"version\": \"0.2.1\"\n                    }\n                ]\n            },\n\n            metadata: {\n                translation: {\n                    id: docSetId,\n                    selectors,\n                    properties: {},\n                    tags: []\n                },\n                document: {\n                    ...headers,\n                    properties: {},\n                    tags: []\n                }\n            },\n            mainSequenceId: mainId,\n            nSequences,\n        };\n        if (config.chapters) {\n            context.document.metadata.document.properties.chapters = config.chapters[0];\n        }\n        context.sequences = [];\n        this.renderEvent('startDocument', environment);\n        this.cachedSequenceIds.unshift(mainId);\n        console.log(mainId);\n        this.renderSequence(environment,2,8);\n        this.cachedSequenceIds.shift();\n        this.renderEvent('endDocument', environment);\n        \n    }\n\n    renderOtherPartOfDocument({docId, config, context, workspace, output}) {\n        const environment = {config, context, workspace, output};\n        context.renderer = this;\n        const documentResult = this.pk.gqlQuerySync(`{\n          document(id: \"${docId}\") {\n            docSetId\n            mainSequence { id }\n            nSequences\n            sequences {\n              id\n              type\n              nBlocks\n            }\n            headers {\n              key\n              value\n            }\n          } \n        }`);\n        const docSetId = documentResult.data.document.docSetId;\n        const mainId = documentResult.data.document.mainSequence.id;\n        const nSequences = documentResult.data.document.nSequences;\n        this.sequences = {};\n        for (const seq of documentResult.data.document.sequences) {\n            this.sequences[seq.id] = seq;\n        }\n        const headers = {};\n        for (const header of documentResult.data.document.headers) {\n            headers[header.key] = header.value;\n        }\n        const docSetResult = this.pk.gqlQuerySync(`{docSet(id: \"${docSetId}\") {selectors {key value}}}`);\n        const selectors = {};\n        for (const selector of docSetResult.data.docSet.selectors) {\n            selectors[selector.key] = selector.value;\n        }\n        context.document = {\n            id: docId,\n            schema: {\n                \"structure\": \"nested\",\n                \"structure_version\": \"0.2.1\",\n                \"constraints\": [\n                    {\n                        \"name\": \"sofria\",\n                        \"version\": \"0.2.1\"\n                    }\n                ]\n            },\n\n            metadata: {\n                translation: {\n                    id: docSetId,\n                    selectors,\n                    properties: {},\n                    tags: []\n                },\n                document: {\n                    ...headers,\n                    properties: {},\n                    tags: []\n                }\n            },\n            mainSequenceId: mainId,\n            nSequences,\n        };\n        if (config.chapters) {\n            context.document.metadata.document.properties.chapters = config.chapters[0];\n        }\n        context.sequences = [];\n        this.renderEvent('startDocument', environment);\n        this.cachedSequenceIds.unshift(mainId);\n        console.log(mainId);\n        this.renderSequence(environment,2,8);\n        this.cachedSequenceIds.shift();\n        this.renderEvent('endDocument', environment);\n        \n    }\n    testAddingSequence(mainId,environment,fromId,toId){\n        this.cachedSequenceIds.unshift(mainId);\n        this.renderSequence(environment,fromId,toId);\n        this.cachedSequenceIds.shift();\n    }\n\n    sequenceContext(sequence, sequenceId) {\n        return {\n            id: sequenceId,\n            type: camelCaseToSnakeCase(sequence.type),\n            nBlocks: sequence.nBlocks,\n            milestones: new Set([]),\n        }\n    }\n\n    renderSequence(environment,fromBlockNumber,toBlockNumber) {\n        \n        const context = environment.context;\n        const sequenceId = this.cachedSequenceIds[0];\n        const documentResult = this.pk.gqlQuerySync(`{document(id: \"${context.document.id}\") {sequence(id:\"${sequenceId}\") {id type nBlocks blocks { os {payload} is {payload} } } } }`);\n        const sequence = documentResult.data.document.sequence;\n        console.log(sequence);\n        console.log(sequence.nBlocks);\n        if (!sequence) {\n            throw new Error(`Sequence '${sequenceId}' not found in renderSequenceId()`);\n        }\n        context.sequences.unshift(this.sequenceContext(sequence, sequenceId));\n        console.lo\n        this.renderEvent('startSequence', environment);\n        let outputBlockN = 0;\n        let nbForLoop = 0;\n        let initBlockNumber = 0;\n        if(sequence.type === 'main'){\n            nbForLoop = toBlockNumber;\n            initBlockNumber = fromBlockNumber;\n        }\n        else{\n            nbForLoop=sequence.nBlocks\n        }\n        for (let inputBlockN = initBlockNumber; inputBlockN < nbForLoop; inputBlockN++) {\n            if (environment.config.chapters && sequence.type === \"main\") {\n                const chapterScopes = [\n                    ...sequence.blocks[inputBlockN].os.map(s => s.payload),\n                    ...sequence.blocks[inputBlockN].is.map(s => s.payload)\n                ].filter(\n                    s => ['chapter'].includes(s.split('/')[0])\n                ).map(\n                    s => s.split('/')[1]\n                );\n                if (chapterScopes.length === 0 || !environment.config.chapters.includes(chapterScopes[0])) {\n                    continue;\n                }\n            }\n            const blocksResult = this.pk.gqlQuerySync(\n                `{\n               document(id: \"${context.document.id}\") {\n                 sequence(id:\"${sequenceId}\") {\n                   blocks(positions:${inputBlockN}) {\n                     bg {subType payload}\n                     bs {payload}\n                     items {type subType payload}\n                   }\n                 }\n               }\n             }`\n            );\n            const blockResult = blocksResult.data.document.sequence.blocks[0];\n            for (const blockGraft of blockResult.bg) {\n                context.sequences[0].block = {\n                    type: \"graft\",\n                    subType: camelCaseToSnakeCase(blockGraft.subType),\n                    blockN: outputBlockN,\n                    sequence: this.sequences[blockGraft.payload]\n                }\n                this.cachedSequenceIds.unshift(blockGraft.payload);\n                this.renderEvent('blockGraft', environment);\n                this.cachedSequenceIds.shift();\n                outputBlockN++;\n            }\n            const subTypeValues = blockResult.bs.payload.split('/');\n            let subTypeValue = subTypeValues[1]? `usfm:${subTypeValues[1]}` : subTypeValues[0];\n            context.sequences[0].block = {\n                type: \"paragraph\",\n                subType: subTypeValue,\n                blockN: outputBlockN,\n                wrappers: []\n            }\n            this.renderEvent('startParagraph', environment);\n            this._tokens = [];\n            if (sequence.type === \"main\" && this.currentCV.chapter) {\n                const wrapper = {\n                    type: \"wrapper\",\n                    subType: 'chapter',\n                    atts: {\n                        number: this.currentCV.chapter\n                    }\n                };\n                environment.context.sequences[0].element = wrapper;\n                environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                this.renderEvent('startWrapper', environment);\n            }\n            if (sequence.type === \"main\" && this.currentCV.verses) {\n                const wrapper = {\n                    type: \"wrapper\",\n                    subType: 'verses',\n                    atts: {\n                        number: this.currentCV.verses\n                    }\n                };\n                environment.context.sequences[0].element = wrapper;\n                environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                this.renderEvent('startWrapper', environment);\n            }\n            this.renderContent(blockResult.items, environment);\n            this._tokens = [];\n            if (sequence.type === \"main\" && this.currentCV.verses) {\n                const wrapper = {\n                    type: \"wrapper\",\n                    subType: 'verses',\n                    atts: {\n                        number: this.currentCV.verses\n                    }\n                };\n                environment.context.sequences[0].element = wrapper;\n                environment.context.sequences[0].block.wrappers.shift();\n                this.renderEvent('endWrapper', environment);\n            }\n            if (sequence.type === \"main\" && this.currentCV.chapter) {\n                const wrapper = {\n                    type: \"wrapper\",\n                    subType: 'chapter',\n                    atts: {\n                        number: this.currentCV.chapter\n                    }\n                };\n                environment.context.sequences[0].element = wrapper;\n                environment.context.sequences[0].block.wrappers.shift();\n                this.renderEvent('endWrapper', environment);\n            }\n            this.renderEvent('endParagraph', environment);\n            delete context.sequences[0].block;\n            outputBlockN++;\n        }\n        this.renderEvent('endSequence', environment);\n        context.sequences.shift();\n        \n    }\n\n    renderContent(items, environment) {\n        for (const item of items) {\n            this.renderItem(item, environment);\n        }\n        this.maybeRenderText(environment);\n    }\n\n    renderItem(item, environment) {\n        if (item.type === 'scope' && item.payload.startsWith('attribute')) {\n            const scopeBits = item.payload.split('/');\n            if (item.subType === \"start\") {\n                if (!this._container) {\n                    this._container = {\n                        direction: \"start\",\n                        subType: `usfm:w`,\n                        type: \"wrapper\",\n                        atts: {}\n                    };\n                }\n                if (scopeBits[3] in this._container.atts) {\n                    this._container.atts[scopeBits[3]].push(scopeBits[5]);\n                } else {\n                    this._container.atts[scopeBits[3]] = [scopeBits[5]];\n                }\n            } else {\n                if (!this._container) {\n                    this._container = {\n                        direction: \"end\",\n                        subType: `usfm:${camelCaseToSnakeCase(scopeBits[2])}`,\n                    };\n                    if(scopeBits[1] === 'milestone') {\n                        this._container.type = \"end_milestone\";\n                    } else {\n                        this._container.type = \"wrapper\";\n                        this._container.atts = {};\n                    }\n                }\n            }\n        } else {\n            if (this._container) {\n                this.maybeRenderText(environment);\n                this.renderContainer(environment);\n            }\n            if (item.type === 'token') {\n                this._tokens.push(item.payload.replace(/\\s+/g, \" \"));\n            } else if (item.type === \"graft\") {\n                this.maybeRenderText(environment);\n                const graft = {\n                    type: \"graft\",\n                    subType: camelCaseToSnakeCase(item.subType),\n                    sequence: this.sequences[item.payload],\n                };\n                environment.context.sequences[0].element = graft;\n                this.cachedSequenceIds.unshift(item.payload);\n                this.renderEvent('inlineGraft', environment);\n                this.cachedSequenceIds.shift();\n                delete environment.context.sequences[0].element;\n            } else { // scope\n                this.maybeRenderText(environment);\n                const scopeBits = item.payload.split('/');\n                if ([\"chapter\", \"verses\"].includes(scopeBits[0])) {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: camelCaseToSnakeCase(scopeBits[0]),\n                        atts: {\n                            number: scopeBits[1]\n                        }\n                    };\n                    environment.context.sequences[0].element = wrapper;\n                    if (item.subType === 'start') {\n                        this.currentCV[scopeBits[0]] = scopeBits[1];\n                        environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                        this.renderEvent('startWrapper', environment);\n                        const cvMark = {\n                            \"type\": \"mark\",\n                            \"subType\": `${scopeBits[0]}_label`,\n                            \"atts\": {\n                                \"number\": scopeBits[1]\n                            }\n                        };\n                        environment.context.sequences[0].element = cvMark;\n                        this.renderEvent('mark', environment);\n                        environment.context.sequences[0].element = wrapper;\n                    } else {\n                        this.renderEvent('endWrapper', environment);\n                        environment.context.sequences[0].block.wrappers.shift();\n                        delete environment.context.sequences[0].element;\n                        this.currentCV[scopeBits[0]] = null;\n                    }\n                } else if ([\"pubChapter\", \"pubVerse\", \"altChapter\", \"altVerse\"].includes(scopeBits[0])) {\n                    if (item.subType === 'start') {\n                        const mark = {\n                            type: \"mark\",\n                            subType: camelCaseToSnakeCase(scopeBits[0]),\n                            atts: {\n                                number: scopeBits[1]\n                            }\n                        };\n                        environment.context.sequences[0].element = mark;\n                        this.renderEvent('mark', environment);\n                        delete environment.context.sequences[0].element;\n                    }\n                } else if (scopeBits[0] === 'span') {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: `usfm:${scopeBits[1]}`,\n                        atts: {}\n                    };\n                    environment.context.sequences[0].element = wrapper;\n                    if (item.subType === 'start') {\n                        environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                        this.renderEvent('startWrapper', environment);\n                    } else {\n                        this.renderEvent('endWrapper', environment);\n                        environment.context.sequences[0].block.wrappers.shift();\n                    }\n                    delete environment.context.sequences[0].element;\n                } else if (scopeBits[0] === 'spanWithAtts') {\n                    if (item.subType === 'start') {\n                        this._container = {\n                            direction: \"start\",\n                            type: \"wrapper\",\n                            subType: `usfm:${scopeBits[1]}`,\n                            atts: {}\n                        };\n                    }\n                } else if (scopeBits[0] === 'milestone' && item.subType === \"start\") {\n                    if (scopeBits[1] === 'ts') {\n                        const mark = {\n                            type: \"mark\",\n                            subType: `usfm:${camelCaseToSnakeCase(scopeBits[1])}`,\n                            atts: {}\n                        };\n                        environment.context.sequences[0].element = mark;\n                        this.renderEvent('mark', environment);\n                        delete environment.context.sequences[0].element;\n                    } else {\n                        this._container = {\n                            type: \"start_milestone\",\n                            subType: `usfm:${camelCaseToSnakeCase(scopeBits[1])}`,\n                            atts: {}\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    maybeRenderText(environment) {\n        if (this._tokens.length === 0) {\n            return;\n        }\n        const elementContext = {\n            type: 'text',\n            text: this._tokens.join(''),\n        };\n        environment.context.sequences[0].element = elementContext;\n        this._tokens = [];\n        this.renderEvent('text', environment);\n        delete environment.context.sequences[0].element;\n    }\n\n    renderContainer(environment) {\n        if (this._container.type === \"wrapper\") {\n            const direction = this._container.direction;\n            delete this._container.direction;\n            if (direction === 'start') {\n                environment.context.sequences[0].element = this._container;\n                environment.context.sequences[0].block.wrappers.unshift(this._container.subType);\n                this.renderEvent('startWrapper', environment);\n                delete environment.context.sequences[0].element;\n            } else {\n                environment.context.sequences[0].element = this._container;\n                this.renderEvent('endWrapper', environment);\n                environment.context.sequences[0].block.wrappers.shift();\n                delete environment.context.sequences[0].element;\n            }\n        } else if (this._container.type === \"start_milestone\") {\n            environment.context.sequences[0].element = this._container;\n            this.renderEvent('startMilestone', environment);\n            delete environment.context.sequences[0].element;\n        } else if (this._container.type === \"end_milestone\") {\n            environment.context.sequences[0].element = this._container;\n            this.renderEvent('endMilestone', environment);\n            delete environment.context.sequences[0].element;\n        }\n        this._container = null;\n    }\n\n}\nexport {SofriaRenderFromProskomma2};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}