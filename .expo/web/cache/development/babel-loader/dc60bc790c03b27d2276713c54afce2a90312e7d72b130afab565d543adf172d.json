{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SofriaRenderFromProskomma from \"./SofiraRenderFromProskommaNew\";\nimport sofria2WebActions from \"../../renderer/sofria2web\";\nimport { renderers } from \"../../renderer/render2reactNative\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction ReadingScreen(_ref) {\n  var livre = _ref.livre,\n    bible = _ref.bible,\n    flatListRef = _ref.flatListRef,\n    pk = _ref.pk;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  useEffect(function () {\n    var queryStartDocument = function queryStartDocument() {\n      var documentQuery = \"\\n        {\\n          document(docSetId: \\\"\" + bible + \"\\\" withBook: \\\"\" + livre + \"\\\") {\\n            id\\n            cIndexes {\\n              chapter\\n            }\\n          }\\n        }\\n      \";\n      var documentResult = pk.gqlQuerySync(documentQuery);\n      var renderer = new SofriaRenderFromProskomma({\n        proskomma: pk,\n        actions: sofria2WebActions\n      });\n      var state = 'begin';\n      var config = {\n        showWordAtts: false,\n        showTitles: true,\n        showHeadings: true,\n        showIntroductions: true,\n        showFootnotes: true,\n        showXrefs: true,\n        showParaStyles: true,\n        showCharacterMarkup: true,\n        showChapterLabels: true,\n        showVersesLabels: true,\n        nbBlock: 1,\n        chapters: [\"\" + documentResult.data.document.cIndexes.shift().chapter],\n        selectedBcvNotes: [],\n        displayPartOfText: {\n          state: state\n        },\n        bcvNotesCallback: function bcvNotesCallback(bcv) {\n          setBcvNoteRef(bcv);\n        },\n        renderers: renderers\n      };\n      try {\n        var output = {};\n        var context = {};\n        var workspace = {};\n        renderer.renderDocument1({\n          docId: documentResult.data.document.id,\n          config: config,\n          context: context,\n          workspace: workspace,\n          output: output\n        });\n        config.displayPartOfText.state = 'continue';\n        setData(output.paras);\n      } catch (err) {\n        console.log('Renderer', err);\n        throw err;\n      }\n    };\n    queryStartDocument();\n  }, [bible, livre, pk]);\n  var renderItem = useCallback(function (_ref2) {\n    var item = _ref2.item;\n    return item;\n  }, []);\n  var keyExtractor = useCallback(function (item, index) {\n    return \"para-\" + index + \"-\" + livre + \"-\" + bible;\n  }, [livre, bible]);\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsx(FlatList, {\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      removeClippedSubviews: true,\n      data: data,\n      renderItem: renderItem,\n      keyExtractor: keyExtractor,\n      onEndReached: function onEndReached() {},\n      scrollEventThrottle: 16,\n      onEndReachedThreshold: 0.8\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nexport { ReadingScreen };","map":{"version":3,"names":["React","useState","useCallback","useEffect","View","StatusBar","FlatList","SofriaRenderFromProskomma","sofria2WebActions","renderers","jsx","_jsx","jsxs","_jsxs","ReadingScreen","_ref","livre","bible","flatListRef","pk","_useState","_useState2","_slicedToArray","data","setData","queryStartDocument","documentQuery","documentResult","gqlQuerySync","renderer","proskomma","actions","state","config","showWordAtts","showTitles","showHeadings","showIntroductions","showFootnotes","showXrefs","showParaStyles","showCharacterMarkup","showChapterLabels","showVersesLabels","nbBlock","chapters","document","cIndexes","shift","chapter","selectedBcvNotes","displayPartOfText","bcvNotesCallback","bcv","setBcvNoteRef","output","context","workspace","renderDocument1","docId","id","paras","err","console","log","renderItem","_ref2","item","keyExtractor","index","style","flex","children","height","width","removeClippedSubviews","onEndReached","scrollEventThrottle","onEndReachedThreshold"],"sources":["/home/gabriel/repos/jxt-korennumi/components/used/ReadingScreen.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { View, StatusBar, FlatList } from 'react-native';\nimport SofriaRenderFromProskomma from './SofiraRenderFromProskommaNew';\nimport sofria2WebActions from '../../renderer/sofria2web';\nimport { renderers } from '../../renderer/render2reactNative';\n\nfunction ReadingScreen({ livre, bible, flatListRef, pk }) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const queryStartDocument = () => {\n      let documentQuery = `\n        {\n          document(docSetId: \"${bible}\" withBook: \"${livre}\") {\n            id\n            cIndexes {\n              chapter\n            }\n          }\n        }\n      `;\n\n      const documentResult = pk.gqlQuerySync(documentQuery);\n\n      const renderer = new SofriaRenderFromProskomma({\n        proskomma: pk,\n        actions: sofria2WebActions,\n      });\n\n      const state = 'begin';\n      const config = {\n        showWordAtts: false,\n        showTitles: true,\n        showHeadings: true,\n        showIntroductions: true,\n        showFootnotes: true,\n        showXrefs: true,\n        showParaStyles: true,\n        showCharacterMarkup: true,\n        showChapterLabels: true,\n        showVersesLabels: true,\n        nbBlock: 1,\n        chapters: [`${documentResult.data.document.cIndexes.shift().chapter}`],\n        selectedBcvNotes: [],\n        displayPartOfText: { state },\n        bcvNotesCallback: (bcv) => {\n          setBcvNoteRef(bcv);\n        },\n        renderers,\n      };\n\n      try {\n        const output = {};\n        const context = {};\n        const workspace = {};\n        renderer.renderDocument1({\n          docId: documentResult.data.document.id,\n          config,\n          context,\n          workspace,\n          output,\n        });\n        config.displayPartOfText.state = 'continue';\n        setData(output.paras);\n      } catch (err) {\n        console.log('Renderer', err);\n        throw err;\n      }\n    };\n\n    queryStartDocument();\n  }, [bible, livre, pk]);\n\n  const renderItem = useCallback(({ item }) => item, []);\n\n  const keyExtractor = useCallback(\n    (item, index) => `para-${index}-${livre}-${bible}`,\n    [livre, bible]\n  );\n\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        style={{ height: '100%', width: '100%' }}\n        removeClippedSubviews={true}\n        data={data}\n        renderItem={renderItem}\n        keyExtractor={keyExtractor}\n        // ref={flatListRef}\n        onEndReached={() => { }}\n        scrollEventThrottle={16} // Add scrollEventThrottle for better performance\n        onEndReachedThreshold={0.8} // Trigger loadMoreItems when the user reaches 50% from the end\n      />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nexport { ReadingScreen };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}