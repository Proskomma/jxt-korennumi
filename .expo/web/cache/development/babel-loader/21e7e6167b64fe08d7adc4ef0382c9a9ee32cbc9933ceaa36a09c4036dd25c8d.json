{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { queryOneDocument } from \"../../graphql/Query/query\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SofriaRenderFromProskomma from \"./SofiraRenderFromProskommaNew\";\nimport sofria2WebActions from \"../../renderer/sofria2web\";\nimport { renderers } from \"../../renderer/render2reactNative\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ConfigDrawer from \"./TextConfig/configDrawer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction multipleReplace(query, tabl) {\n  var ret = query;\n  for (var _ref of tabl) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var s = _ref2[0];\n    var r = _ref2[1];\n    ret = ret.replace(s, r);\n  }\n  return ret;\n}\nfunction ReadingScreen(_ref3) {\n  var livre = _ref3.livre,\n    bible = _ref3.bible,\n    pk = _ref3.pk;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var documentQuery = \"\\n  {\\n    document(docSetId: \\\"\" + bible + \"\\\" withBook: \\\"\" + livre + \"\\\"){\\n      id\\n      cIndexes {\\n        chapter\\n      }\\n  }}\\n  \";\n  var documentResult = pk.gqlQuerySync(documentQuery);\n  var sofriaRenderer = new SofriaRenderFromProskomma({\n    proskomma: pk,\n    actions: sofria2WebActions\n  });\n  var state = 'begin';\n  var config = {\n    showWordAtts: false,\n    showTitles: true,\n    showHeadings: true,\n    showIntroductions: true,\n    showFootnotes: true,\n    showXrefs: true,\n    showParaStyles: true,\n    showCharacterMarkup: true,\n    showChapterLabels: true,\n    showVersesLabels: true,\n    selectedBcvNotes: [],\n    displayPartOfText: {\n      state: state\n    },\n    bcvNotesCallback: function bcvNotesCallback(bcv) {\n      setBcvNoteRef(bcv);\n    },\n    renderers: renderers\n  };\n  var output = {};\n  console.time();\n  try {\n    sofriaRenderer.renderDocument({\n      docId: documentResult.data.document.id,\n      config: config,\n      output: output\n    });\n  } catch (err) {\n    console.log(\"Renderer\", err);\n    throw err;\n  }\n  console.timeEnd();\n  var renderItem = useCallback(function (_ref4) {\n    var item = _ref4.item;\n    return item;\n  }, []);\n  var keyExtractor = useCallback(function (item, index) {\n    return \"para-\" + index + \"-\" + livre + \"-\" + bible;\n  }, [livre, bible]);\n  var loadMoreItems = useCallback(function () {\n    setData([].concat(_toConsumableArray(data), [output.paras.slice(data.length, data.length + 3)]));\n  });\n  return _jsx(ScrollView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(FlatList, {\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      removeClippedSubviews: true,\n      data: shownParas,\n      renderItem: renderItem,\n      keyExtractor: keyExtractor,\n      onEndReached: loadMoreItems,\n      scrollEventThrottle: 16,\n      onEndReachedThreshold: 0.8\n    })\n  });\n}\nexport { ReadingScreen };","map":{"version":3,"names":["queryOneDocument","View","ScrollView","Text","StatusBar","FlatList","SofriaRenderFromProskomma","sofria2WebActions","renderers","React","useState","useCallback","useEffect","ConfigDrawer","jsx","_jsx","multipleReplace","query","tabl","ret","_ref","_ref2","_slicedToArray","s","r","replace","ReadingScreen","_ref3","livre","bible","pk","_useState","_useState2","data","setData","documentQuery","documentResult","gqlQuerySync","sofriaRenderer","proskomma","actions","state","config","showWordAtts","showTitles","showHeadings","showIntroductions","showFootnotes","showXrefs","showParaStyles","showCharacterMarkup","showChapterLabels","showVersesLabels","selectedBcvNotes","displayPartOfText","bcvNotesCallback","bcv","setBcvNoteRef","output","console","time","renderDocument","docId","document","id","err","log","timeEnd","renderItem","_ref4","item","keyExtractor","index","loadMoreItems","concat","_toConsumableArray","paras","slice","length","style","flex","children","height","width","removeClippedSubviews","shownParas","onEndReached","scrollEventThrottle","onEndReachedThreshold"],"sources":["/home/gabriel/repos/jxt-korennumi/components/used/ReadingScreen.js"],"sourcesContent":["import { queryOneDocument } from '../../graphql/Query/query';\nimport { View, ScrollView, Text, StatusBar, FlatList } from 'react-native';\nimport SofriaRenderFromProskomma from './SofiraRenderFromProskommaNew';\nimport sofria2WebActions from '../../renderer/sofria2web';\nimport { renderers } from '../../renderer/render2reactNative';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ConfigDrawer from './TextConfig/configDrawer';\n\n\nfunction multipleReplace(query, tabl) {\n  let ret = query;\n  for (const [s, r] of tabl) {\n    ret = ret.replace(s, r);\n  }\n  return ret\n}\n\n\n\n\n\n\n\nfunction ReadingScreen({ livre, bible, pk }) {\n\n  const [data, setData] = useState([])\n\n  let documentQuery = `\n  {\n    document(docSetId: \"${bible}\" withBook: \"${livre}\"){\n      id\n      cIndexes {\n        chapter\n      }\n  }}\n  `\n  const documentResult = pk.gqlQuerySync(documentQuery)\n\n\n  const sofriaRenderer = new SofriaRenderFromProskomma({\n    proskomma: pk,\n    actions: sofria2WebActions,\n\n  });\n\n  const state = 'begin';\n  const config = {\n\n    showWordAtts: false,\n    showTitles: true,\n    showHeadings: true,\n    showIntroductions: true,\n    showFootnotes: true,\n    showXrefs: true,\n    showParaStyles: true,\n    showCharacterMarkup: true,\n    showChapterLabels: true,\n    showVersesLabels: true,\n    //nbBlock: 1,\n    //chapters: [`${documentResult.data.document.cIndexes.shift().chapter}`],\n    selectedBcvNotes: [],\n    displayPartOfText: { state },\n    bcvNotesCallback: (bcv) => {\n      setBcvNoteRef(bcv);\n    },\n    renderers,\n  };\n  const output = {};\n\n  console.time()\n  try {\n\n    sofriaRenderer.renderDocument({\n      docId: documentResult.data.document.id,\n      config,\n      output,\n    });\n\n  } catch (err) {\n    console.log(\"Renderer\", err);\n    throw err;\n  }\n  console.timeEnd()\n\n  const renderItem = useCallback(({ item }) => item, []);\n\n  const keyExtractor = useCallback((item, index) => `para-${index}-${livre}-${bible}`, [livre, bible]);\n\n  const loadMoreItems = useCallback(() => { setData([...data, output.paras.slice(data.length, data.length + 3)]) })\n  return (\n    <ScrollView style={{ flex: 1 }}>\n      <FlatList\n        style={{ height: '100%', width: '100%' }}\n        removeClippedSubviews={true}\n        data={shownParas}\n        renderItem={renderItem}\n        keyExtractor={keyExtractor}\n        //ref={flatListRef}\n        onEndReached={loadMoreItems}\n        scrollEventThrottle={16} // Add scrollEventThrottle for better performance\n        onEndReachedThreshold={0.8} // Trigger loadMoreItems when the user reaches 50% from the end\n      />\n    </ScrollView>\n  );\n}\n\nexport { ReadingScreen }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}