{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { queryOneChapterOfOneDocSets } from \"../graphql/Query/query\";\nvar _require = require('proskomma-core'),\n  Proskomma = _require.Proskomma;\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport bottomTab from \"../style/bottomTab\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar succinctlsg = require(\"../succinct/lsg.json\");\nvar pk = new Proskomma([{\n  name: \"source\",\n  type: \"string\",\n  regex: \"^[^\\\\s]+$\"\n}, {\n  name: \"project\",\n  type: \"string\",\n  regex: \"^[^\\\\s]+$\"\n}, {\n  name: \"revision\",\n  type: \"string\",\n  regex: \"^[^\\\\s]+$\"\n}]);\nfunction multipleReplace(query, tabl) {\n  var ret = query;\n  for (var _ref of tabl) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var s = _ref2[0];\n    var r = _ref2[1];\n    ret = ret.replace(s, r);\n  }\n  return ret;\n}\npk.loadSuccinctDocSet(succinctlsg);\nvar chapterQuery = pk.gqlQuerySync(multipleReplace([[\"%idChapter%\", \"1\"], [\"%docSetId%\", \"local_lsg_1\"], [\"%bookCode%\", \"TIT\"]]));\nconsole.log(chapterQuery);\nfunction MainPage() {\n  return _jsx(ScrollView, {\n    style: bottomTab.mainContent,\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Chapitre 1\"\n      }), chapterQuery.data.document.cvIndex.verses.map(function (vers, idvs) {\n        var _vers$verse$;\n        return _jsxs(View, {\n          children: [_jsxs(Text, {\n            children: [\" \", idvs]\n          }), _jsx(Text, {\n            children: (_vers$verse$ = vers.verse[0]) == null ? void 0 : _vers$verse$.text\n          })]\n        }, \"verses \" + idd + \"-\" + idvs);\n      }), _jsx(StatusBar, {\n        style: \"auto\"\n      })]\n    })\n  });\n}\nexport { MainPage };","map":{"version":3,"names":["queryOneChapterOfOneDocSets","_require","require","Proskomma","View","ScrollView","Text","StatusBar","bottomTab","jsx","_jsx","jsxs","_jsxs","succinctlsg","pk","name","type","regex","multipleReplace","query","tabl","ret","_ref","_ref2","_slicedToArray","s","r","replace","loadSuccinctDocSet","chapterQuery","gqlQuerySync","console","log","MainPage","style","mainContent","children","data","document","cvIndex","verses","map","vers","idvs","_vers$verse$","verse","text","idd"],"sources":["/home/gabriel/repos/jxt-korennumi/components/mainPage.js"],"sourcesContent":["import { queryOneChapterOfOneDocSets } from '../graphql/Query/query';\nconst { Proskomma } = require('proskomma-core');\nimport { View, ScrollView, Text, StatusBar } from 'react-native';\nimport bottomTab from '../style/bottomTab';\n\nconst succinctlsg = require('../succinct/lsg.json');\nconst pk = new Proskomma([\n  {\n    name: \"source\",\n    type: \"string\",\n    regex: \"^[^\\\\s]+$\",\n  },\n  {\n    name: \"project\",\n    type: \"string\",\n    regex: \"^[^\\\\s]+$\",\n  },\n  {\n    name: \"revision\",\n    type: \"string\",\n    regex: \"^[^\\\\s]+$\",\n  },\n]);\n\nfunction multipleReplace(query, tabl) {\n  let ret = query;\n  for (const [s, r] of tabl) {\n    ret = ret.replace(s, r);\n  }\n  return ret\n}\n\npk.loadSuccinctDocSet(succinctlsg);\nlet chapterQuery = pk.gqlQuerySync(multipleReplace([[\"%idChapter%\", \"1\"], [\"%docSetId%\", \"local_lsg_1\"], [\"%bookCode%\", \"TIT\"]]));\n\n\nconsole.log(chapterQuery);\n\n\nfunction MainPage() {\n  return (\n    <ScrollView style={bottomTab.mainContent}>\n      <View>\n        <Text>Chapitre 1</Text>\n\n        {chapterQuery.data.document.cvIndex.verses.map(\n          (vers, idvs) => <View key={`verses ${idd}-${idvs}`}>\n            <Text> {idvs}</Text>\n            <Text>{vers.verse[0]?.text}</Text>\n          </View>)}\n\n        <StatusBar style=\"auto\" />\n      </View>\n    </ScrollView>\n  );\n\n}\nexport { MainPage }\n\n"],"mappings":";AAAA,SAASA,2BAA2B;AACpC,IAAAC,QAAA,GAAsBC,OAAO,CAAC,gBAAgB,CAAC;EAAvCC,SAAS,GAAAF,QAAA,CAATE,SAAS;AAA+B,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAEhD,OAAOC,SAAS;AAA2B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE3C,IAAMC,WAAW,GAAGX,OAAO,wBAAwB;AACnD,IAAMY,EAAE,GAAG,IAAIX,SAAS,CAAC,CACvB;EACEY,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE;AACT,CAAC,EACD;EACEF,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE;AACT,CAAC,EACD;EACEF,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE;AACT,CAAC,CACF,CAAC;AAEF,SAASC,eAAeA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACpC,IAAIC,GAAG,GAAGF,KAAK;EACf,SAAAG,IAAA,IAAqBF,IAAI,EAAE;IAAA,IAAAG,KAAA,GAAAC,cAAA,CAAAF,IAAA;IAAA,IAAfG,CAAC,GAAAF,KAAA;IAAA,IAAEG,CAAC,GAAAH,KAAA;IACdF,GAAG,GAAGA,GAAG,CAACM,OAAO,CAACF,CAAC,EAAEC,CAAC,CAAC;EACzB;EACA,OAAOL,GAAG;AACZ;AAEAP,EAAE,CAACc,kBAAkB,CAACf,WAAW,CAAC;AAClC,IAAIgB,YAAY,GAAGf,EAAE,CAACgB,YAAY,CAACZ,eAAe,CAAC,CAAC,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AAGjIa,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;AAGzB,SAASI,QAAQA,CAAA,EAAG;EAClB,OACEvB,IAAA,CAACL,UAAU;IAAC6B,KAAK,EAAE1B,SAAS,CAAC2B,WAAY;IAAAC,QAAA,EACvCxB,KAAA,CAACR,IAAI;MAAAgC,QAAA,GACH1B,IAAA,CAACJ,IAAI;QAAA8B,QAAA,EAAC;MAAU,EAAO,EAEtBP,YAAY,CAACQ,IAAI,CAACC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACC,GAAG,CAC5C,UAACC,IAAI,EAAEC,IAAI;QAAA,IAAAC,YAAA;QAAA,OAAKhC,KAAA,CAACR,IAAI;UAAAgC,QAAA,GACnBxB,KAAA,CAACN,IAAI;YAAA8B,QAAA,GAAC,GAAC,EAACO,IAAI;UAAA,EAAQ,EACpBjC,IAAA,CAACJ,IAAI;YAAA8B,QAAA,GAAAQ,YAAA,GAAEF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,qBAAbD,YAAA,CAAeE;UAAI,EAAQ;QAAA,eAFCC,GAAG,SAAIJ,IAAI,CAGzC;MAAA,EAAC,EAEVjC,IAAA,CAACH,SAAS;QAAC2B,KAAK,EAAC;MAAM,EAAG;IAAA;EACrB,EACI;AAGjB;AACA,SAASD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}