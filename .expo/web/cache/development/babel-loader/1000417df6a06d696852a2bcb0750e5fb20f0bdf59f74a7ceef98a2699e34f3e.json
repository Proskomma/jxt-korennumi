{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Text, Checkbox } from 'react-native-paper';\nimport { memo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CheckboxMe = memo(function (_ref) {\n  var num = _ref.num,\n    state = _ref.state;\n  var _state = _slicedToArray(state, 2),\n    chec = _state[0],\n    setChec = _state[1];\n  var handleCheckboxPress = function handleCheckboxPress() {\n    setChec(function (prevState) {\n      return !prevState;\n    });\n  };\n  return _jsxs(View, {\n    style: {\n      flexDirection: 'column',\n      width: 50\n    },\n    children: [_jsx(Text, {\n      style: {\n        alignSelf: 'center'\n      },\n      children: num\n    }), _jsx(View, {\n      style: {\n        alignSelf: 'center'\n      },\n      children: _jsx(Checkbox, {\n        style: {\n          alignSelf: 'center'\n        },\n        status: chec ? 'checked' : 'unchecked',\n        onPress: handleCheckboxPress\n      })\n    })]\n  });\n});\nexport { CheckboxMe };","map":{"version":3,"names":["Text","Checkbox","memo","View","jsx","_jsx","jsxs","_jsxs","CheckboxMe","_ref","num","state","_state","_slicedToArray","chec","setChec","handleCheckboxPress","prevState","style","flexDirection","width","children","alignSelf","status","onPress"],"sources":["/home/gabriel/repos/jxt-korennumi/components/proofOfConcept/CheckBox.js"],"sourcesContent":["import { Text, Checkbox } from 'react-native-paper';\nimport { memo } from 'react';\nimport { View } from 'react-native';\n\nconst CheckboxMe = memo(({ num, state }) => {\n  const [chec, setChec] = state;\n\n  const handleCheckboxPress = () => {\n    setChec(prevState => !prevState); // Use the previous state to update correctly\n  };\n\n  return (\n    <View style={{ flexDirection: 'column', width: 50 }}>\n      <Text style={{ alignSelf: 'center' }}>{num}</Text>\n      <View style={{ alignSelf: 'center' }}>\n        <Checkbox\n          style={{ alignSelf: 'center' }}\n          status={chec ? 'checked' : 'unchecked'}\n          onPress={handleCheckboxPress}\n        />\n      </View>\n    </View>\n  );\n});\n\nexport { CheckboxMe };\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,oBAAoB;AACnD,SAASC,IAAI,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAG7B,IAAMC,UAAU,GAAGN,IAAI,CAAC,UAAAO,IAAA,EAAoB;EAAA,IAAjBC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;EACnC,IAAAC,MAAA,GAAAC,cAAA,CAAwBF,KAAK;IAAtBG,IAAI,GAAAF,MAAA;IAAEG,OAAO,GAAAH,MAAA;EAEpB,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;IAChCD,OAAO,CAAC,UAAAE,SAAS;MAAA,OAAI,CAACA,SAAS;IAAA,EAAC;EAClC,CAAC;EAED,OACEV,KAAA,CAACJ,IAAI;IAACe,KAAK,EAAE;MAAEC,aAAa,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAG,CAAE;IAAAC,QAAA,GAClDhB,IAAA,CAACL,IAAI;MAACkB,KAAK,EAAE;QAAEI,SAAS,EAAE;MAAS,CAAE;MAAAD,QAAA,EAAEX;IAAG,EAAQ,EAClDL,IAAA,CAACF,IAAI;MAACe,KAAK,EAAE;QAAEI,SAAS,EAAE;MAAS,CAAE;MAAAD,QAAA,EACnChB,IAAA,CAACJ,QAAQ;QACPiB,KAAK,EAAE;UAAEI,SAAS,EAAE;QAAS,CAAE;QAC/BC,MAAM,EAAET,IAAI,GAAG,SAAS,GAAG,WAAY;QACvCU,OAAO,EAAER;MAAoB;IAC7B,EACG;EAAA,EACF;AAEX,CAAC,CAAC;AAEF,SAASR,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}