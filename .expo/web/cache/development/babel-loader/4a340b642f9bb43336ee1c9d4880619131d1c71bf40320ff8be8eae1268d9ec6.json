{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar ProskommaRender = require(\"./ProskommaRender\");\nvar camelCaseToSnakeCase = function camelCaseToSnakeCase(s) {\n  var ret = [];\n  for (var c of s.split(\"\")) {\n    if (c.toUpperCase() === c && c.toLowerCase() !== c) {\n      ret.push(\"_\" + c.toLowerCase());\n    } else {\n      ret.push(c);\n    }\n  }\n  return ret.join(\"\");\n};\nvar SofriaRenderFromProskomma = function (_ProskommaRender) {\n  _inherits(SofriaRenderFromProskomma, _ProskommaRender);\n  var _super = _createSuper(SofriaRenderFromProskomma);\n  function SofriaRenderFromProskomma(spec) {\n    var _this;\n    _classCallCheck(this, SofriaRenderFromProskomma);\n    _this = _super.call(this, spec);\n    if (!spec.proskomma) {\n      throw new Error(\"No Proskomma\");\n    }\n    _this.pk = spec.proskomma;\n    _this._tokens = [];\n    _this._container = null;\n    _this.cachedSequenceIds = [];\n    _this.sequences = null;\n    _this.currentCV = {\n      chapter: null,\n      verses: null\n    };\n    return _this;\n  }\n  _createClass(SofriaRenderFromProskomma, [{\n    key: \"renderDocument1\",\n    value: function renderDocument1(_ref) {\n      var docId = _ref.docId,\n        config = _ref.config,\n        context = _ref.context,\n        workspace = _ref.workspace,\n        output = _ref.output;\n      var environment = {\n        config: config,\n        context: context,\n        workspace: workspace,\n        output: output\n      };\n      context.renderer = this;\n      var documentResult = this.pk.gqlQuerySync(\"{\\n          document(id: \\\"\" + docId + \"\\\") {\\n            docSetId\\n            mainSequence { id }\\n            nSequences\\n            sequences {\\n              id\\n              type\\n              nBlocks\\n            }\\n            headers {\\n              key\\n              value\\n            }\\n          } \\n        }\");\n      var docSetId = documentResult.data.document.docSetId;\n      var mainId = documentResult.data.document.mainSequence.id;\n      var nSequences = documentResult.data.document.nSequences;\n      this.sequences = {};\n      if (!environment.nbBlock) {\n        environment.config.nbBlock = 1000;\n      }\n      for (var seq of documentResult.data.document.sequences) {\n        this.sequences[seq.id] = seq;\n      }\n      var headers = {};\n      for (var header of documentResult.data.document.headers) {\n        headers[header.key] = header.value;\n      }\n      var docSetResult = this.pk.gqlQuerySync(\"{docSet(id: \\\"\" + docSetId + \"\\\") {selectors {key value}}}\");\n      var selectors = {};\n      for (var selector of docSetResult.data.docSet.selectors) {\n        selectors[selector.key] = selector.value;\n      }\n      context.document = {\n        id: docId,\n        schema: {\n          \"structure\": \"nested\",\n          \"structure_version\": \"0.2.1\",\n          \"constraints\": [{\n            \"name\": \"sofria\",\n            \"version\": \"0.2.1\"\n          }]\n        },\n        metadata: {\n          translation: {\n            id: docSetId,\n            selectors: selectors,\n            properties: {},\n            tags: []\n          },\n          document: _objectSpread(_objectSpread({}, headers), {}, {\n            properties: {},\n            tags: []\n          })\n        },\n        mainSequenceId: mainId,\n        nSequences: nSequences\n      };\n      if (config.chapters) {\n        if (workspace.chapters) {\n          if (workspace.chapters.length === 0) {\n            workspace.chapters = config.chapters;\n          }\n        } else {\n          workspace.chapters = config.chapters;\n        }\n      }\n      if (workspace.chapters) {\n        context.document.metadata.document.properties.chapters = workspace.chapters[0];\n      }\n      context.sequences = [{}];\n      if (config.displayPartOfText != null) {\n        if (!['begin', 'continue'].includes(config.displayPartOfText.state)) {\n          throw new Error(\"state must be typeof string and one of ['begin','continue']\");\n        }\n      }\n      if (environment.config.displayPartOfText != null) {\n        if (environment.config.displayPartOfText.state === 'begin') {\n          this.renderEvent('startDocument', environment);\n        }\n      } else {\n        this.renderEvent('startDocument', environment);\n      }\n      this.cachedSequenceIds.unshift(mainId);\n      this.renderSequence(environment);\n      this.cachedSequenceIds.shift();\n      this.renderEvent('endDocument', environment);\n    }\n  }, {\n    key: \"sequenceContext\",\n    value: function sequenceContext(sequence, sequenceId) {\n      return {\n        id: sequenceId,\n        type: camelCaseToSnakeCase(sequence.type),\n        nBlocks: sequence.nBlocks,\n        milestones: new Set([])\n      };\n    }\n  }, {\n    key: \"renderSequence\",\n    value: function renderSequence(environment) {\n      var context = environment.context;\n      var sequenceId = this.cachedSequenceIds[0];\n      var sequenceType = this.pk.gqlQuerySync(\"{document(id: \\\"\" + context.document.id + \"\\\") {sequence(id:\\\"\" + sequenceId + \"\\\") {type} } }\").data.document.sequence.type;\n      var documentResult = {};\n      var currentChapter = null;\n      var currentChapterContext = null;\n      var blocksIdsToRender = [];\n      if (sequenceType === 'main') {\n        if (environment.workspace.blockId) {\n          blocksIdsToRender = environment.workspace.blockId;\n          console.log(blocksIdsToRender);\n        }\n      }\n      var numberBlockTorender = 0;\n      if (sequenceType === 'main') {\n        if (environment.workspace.chapters) {\n          while (environment.workspace.chapters.length != 0) {\n            currentChapter = environment.workspace.chapters.pop();\n            if (currentChapter) {\n              currentChapterContext = this.pk.gqlQuerySync(\"{document(id: \\\"\" + context.document.id + \"\\\") {cIndex(chapter: \" + currentChapter + \") {\\n                startBlock\\n                endBlock\\n              }}}\");\n            }\n            if (currentChapter && currentChapterContext) {\n              for (var i = currentChapterContext.data.document.cIndex.startBlock; i < currentChapterContext.data.document.cIndex.endBlock + 1; i++) {\n                blocksIdsToRender.push(i);\n              }\n            }\n            environment.workspace.blockId = blocksIdsToRender;\n          }\n        } else {\n          for (var _i = 0; _i < this.pk.gqlQuerySync(\"{document(id: \\\"\" + context.document.id + \"\\\") {sequence(id:\\\"\" + sequenceId + \"\\\") {nBlocks} }}\").data.document.sequence.nBlocks; _i++) {\n            blocksIdsToRender.push(_i);\n          }\n        }\n        blocksIdsToRender.sort(function (a, b) {\n          return b - a;\n        });\n        if (!environment.nbBlock) {\n          environment.nbBlock = null;\n        }\n        if (!environment.config.nbBlock) {\n          environment.config.nbBlock = blocksIdsToRender.length;\n        }\n      } else {\n        for (var _i2 = 0; _i2 < this.pk.gqlQuerySync(\"{document(id: \\\"\" + context.document.id + \"\\\") {sequence(id:\\\"\" + sequenceId + \"\\\") {nBlocks} }}\").data.document.sequence.nBlocks; _i2++) {\n          blocksIdsToRender.push(_i2);\n        }\n      }\n      if (sequenceType === 'main') {\n        numberBlockTorender = environment.config.nbBlock;\n      } else {\n        numberBlockTorender = blocksIdsToRender.length;\n      }\n      documentResult = this.pk.gqlQuerySync(\"{document(id: \\\"\" + context.document.id + \"\\\") {id sequence(id:\\\"\" + sequenceId + \"\\\") {id type nBlocks blocks(positions: [\" + blocksIdsToRender + \"]){ os {payload} is {payload} } } } }\");\n      var sequence = documentResult.data.document.sequence;\n      if (!sequence) {\n        throw new Error(\"Sequence '\" + sequenceId + \"' not found in renderSequenceId()\");\n      }\n      if (environment.config.displayPartOfText != null) {\n        if (environment.config.displayPartOfText != 'continue') {\n          context.sequences.unshift(this.sequenceContext(sequence, sequenceId));\n        }\n      } else {\n        context.sequences.unshift(this.sequenceContext(sequence, sequenceId));\n      }\n      this.renderEvent('startSequence', environment);\n      var outputBlockN = 0;\n      for (var _i3 = 0; _i3 < numberBlockTorender; _i3++) {\n        if (blocksIdsToRender.length != 0) {\n          var inputBlockN = {};\n          if (sequenceType === 'main') {\n            inputBlockN = blocksIdsToRender.pop();\n          } else {\n            inputBlockN = blocksIdsToRender.pop();\n          }\n          var blocksResult = this.pk.gqlQuerySync(\"{\\n               document(id: \\\"\" + context.document.id + \"\\\") {\\n                 sequence(id:\\\"\" + sequenceId + \"\\\") {\\n                   blocks(positions:\" + inputBlockN + \") {\\n                     bg {subType payload}\\n                     bs {payload}\\n                     items {type subType payload}\\n                   }\\n                 }\\n               }\\n             }\");\n          var blockResult = blocksResult.data.document.sequence.blocks[0];\n          for (var blockGraft of blockResult.bg) {\n            context.sequences[0].block = {\n              type: \"graft\",\n              subType: camelCaseToSnakeCase(blockGraft.subType),\n              blockN: outputBlockN,\n              sequence: this.sequences[blockGraft.payload]\n            };\n            this.cachedSequenceIds.unshift(blockGraft.payload);\n            this.renderEvent('blockGraft', environment);\n            this.cachedSequenceIds.shift();\n            outputBlockN++;\n          }\n          var subTypeValues = blockResult.bs.payload.split('/');\n          var subTypeValue = void 0;\n          if (subTypeValues[1] && [\"tr\", \"zrow\"].includes(subTypeValues[1])) {\n            subTypeValue = subTypeValues[1] === \"tr\" ? \"usfm:tr\" : \"pk\";\n          } else if (subTypeValues[1]) {\n            subTypeValue = \"usfm:\" + subTypeValues[1];\n          } else {\n            subTypeValue = subTypeValues[0];\n          }\n          context.sequences[0].block = {\n            type: [\"usfm:tr\", \"pk\"].includes(subTypeValue) ? \"row\" : \"paragraph\",\n            subType: subTypeValue,\n            blockN: outputBlockN,\n            wrappers: []\n          };\n          if (context.sequences[0].block.type === \"row\") {\n            this.renderEvent('startRow', environment);\n          } else {\n            this.renderEvent('startParagraph', environment);\n          }\n          this._tokens = [];\n          if (sequenceType === \"main\" && this.currentCV.chapter) {\n            var wrapper = {\n              type: \"wrapper\",\n              subType: 'chapter',\n              atts: {\n                number: this.currentCV.chapter\n              }\n            };\n            environment.context.sequences[0].element = wrapper;\n            environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n            this.renderEvent('startWrapper', environment);\n          }\n          if (sequenceType === \"main\" && this.currentCV.verses) {\n            var _wrapper = {\n              type: \"wrapper\",\n              subType: 'verses',\n              atts: {\n                number: this.currentCV.verses\n              }\n            };\n            environment.context.sequences[0].element = _wrapper;\n            environment.context.sequences[0].block.wrappers.unshift(_wrapper.subType);\n            this.renderEvent('startWrapper', environment);\n          }\n          this.renderContent(blockResult.items, environment);\n          this._tokens = [];\n          if (sequenceType === \"main\" && this.currentCV.verses) {\n            var _wrapper2 = {\n              type: \"wrapper\",\n              subType: 'verses',\n              atts: {\n                number: this.currentCV.verses\n              }\n            };\n            environment.context.sequences[0].element = _wrapper2;\n            environment.context.sequences[0].block.wrappers.shift();\n            this.renderEvent('endWrapper', environment);\n          }\n          if (sequenceType === \"main\" && this.currentCV.chapter) {\n            var _wrapper3 = {\n              type: \"wrapper\",\n              subType: 'chapter',\n              atts: {\n                number: this.currentCV.chapter\n              }\n            };\n            environment.context.sequences[0].element = _wrapper3;\n            environment.context.sequences[0].block.wrappers.shift();\n            this.renderEvent('endWrapper', environment);\n          }\n          if (context.sequences[0].block.type === \"row\") {\n            this.renderEvent('endRow', environment);\n          } else {\n            this.renderEvent('endParagraph', environment);\n          }\n          delete context.sequences[0].block;\n          outputBlockN++;\n        }\n      }\n      this.renderEvent('endSequence', environment);\n      if (sequenceType === 'main') {\n        environment.workspace.blockId = blocksIdsToRender;\n      }\n      context.sequences.shift();\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(items, environment) {\n      for (var i = 0; i < items.length; i++) {\n        this.renderItem(items[i], environment);\n      }\n      this.maybeRenderText(environment);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item, environment) {\n      if (item.type === 'scope' && item.payload.startsWith('attribute')) {\n        var scopeBits = item.payload.split('/');\n        if (item.subType === \"start\") {\n          if (!this._container) {\n            this._container = {\n              direction: \"start\",\n              subType: \"usfm:w\",\n              type: \"wrapper\",\n              atts: {}\n            };\n          }\n          if (scopeBits[3] in this._container.atts) {\n            this._container.atts[scopeBits[3]].push(scopeBits[5]);\n          } else {\n            this._container.atts[scopeBits[3]] = [scopeBits[5]];\n          }\n        } else {\n          if (!this._container) {\n            this._container = {\n              direction: \"end\",\n              subType: \"usfm:\" + camelCaseToSnakeCase(scopeBits[2])\n            };\n            if (scopeBits[1] === 'milestone') {\n              this._container.type = \"end_milestone\";\n            } else {\n              this._container.type = \"wrapper\";\n              this._container.atts = {};\n            }\n          }\n        }\n      } else {\n        if (this._container) {\n          this.maybeRenderText(environment);\n          this.renderContainer(environment);\n          if (item.payload.includes(\"spanWith\")) {\n            this.maybeRenderText(environment);\n            return;\n          }\n        }\n        if (item.type === 'token') {\n          this._tokens.push(item.payload.replace(/\\s+/g, \" \"));\n        } else if (item.type === \"graft\") {\n          this.maybeRenderText(environment);\n          var graft = {\n            type: \"graft\",\n            subType: camelCaseToSnakeCase(item.subType),\n            sequence: this.sequences[item.payload]\n          };\n          environment.context.sequences[0].element = graft;\n          this.cachedSequenceIds.unshift(item.payload);\n          this.renderEvent('inlineGraft', environment);\n          this.cachedSequenceIds.shift();\n          delete environment.context.sequences[0].element;\n        } else {\n          this.maybeRenderText(environment);\n          var _scopeBits = item.payload.split('/');\n          if ([\"chapter\", \"verses\"].includes(_scopeBits[0])) {\n            var wrapper = {\n              type: \"wrapper\",\n              subType: camelCaseToSnakeCase(_scopeBits[0]),\n              atts: {\n                number: _scopeBits[1]\n              }\n            };\n            environment.context.sequences[0].element = wrapper;\n            if (item.subType === 'start') {\n              this.currentCV[_scopeBits[0]] = _scopeBits[1];\n              environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n              this.renderEvent(\"start\" + (_scopeBits[0] === \"chapter\" ? \"Chapter\" : \"Verses\"), environment);\n              this.renderEvent('startWrapper', environment);\n              var cvMark = {\n                \"type\": \"mark\",\n                \"subType\": _scopeBits[0] + \"_label\",\n                \"atts\": {\n                  \"number\": _scopeBits[1]\n                }\n              };\n              environment.context.sequences[0].element = cvMark;\n              this.renderEvent('mark', environment);\n              environment.context.sequences[0].element = wrapper;\n            } else {\n              this.renderEvent('endWrapper', environment);\n              this.renderEvent(\"end\" + (_scopeBits[0] === \"chapter\" ? \"Chapter\" : \"Verses\"), environment);\n              environment.context.sequences[0].block.wrappers.shift();\n              delete environment.context.sequences[0].element;\n              this.currentCV[_scopeBits[0]] = null;\n            }\n          } else if ([\"pubChapter\", \"pubVerse\", \"altChapter\", \"altVerse\"].includes(_scopeBits[0])) {\n            if (item.subType === 'start') {\n              var mark = {\n                type: \"mark\",\n                subType: camelCaseToSnakeCase(_scopeBits[0]),\n                atts: {\n                  number: _scopeBits[1]\n                }\n              };\n              environment.context.sequences[0].element = mark;\n              this.renderEvent('mark', environment);\n              delete environment.context.sequences[0].element;\n            }\n          } else if (_scopeBits[0] === 'span') {\n            var _wrapper4 = {\n              type: \"wrapper\",\n              subType: \"usfm:\" + _scopeBits[1],\n              atts: {}\n            };\n            environment.context.sequences[0].element = _wrapper4;\n            if (item.subType === 'start') {\n              environment.context.sequences[0].block.wrappers.unshift(_wrapper4.subType);\n              this.renderEvent('startWrapper', environment);\n            } else {\n              this.renderEvent('endWrapper', environment);\n              environment.context.sequences[0].block.wrappers.shift();\n            }\n            delete environment.context.sequences[0].element;\n          } else if (_scopeBits[0] === 'spanWithAtts') {\n            if (item.subType === 'start') {\n              this._container = {\n                direction: \"start\",\n                type: \"wrapper\",\n                subType: \"usfm:\" + _scopeBits[1],\n                atts: {}\n              };\n            } else {\n              var _wrapper5 = {\n                type: \"wrapper\",\n                subType: \"usfm:\" + _scopeBits[1],\n                atts: {}\n              };\n              if (item.payload.includes(\"spanWith\")) {}\n              environment.context.sequences[0].element = _wrapper5;\n              this.renderEvent('endWrapper', environment);\n              environment.context.sequences[0].block.wrappers.shift();\n            }\n          } else if (_scopeBits[0] === 'cell') {\n            var _wrapper6 = {\n              direction: \"start\",\n              type: \"wrapper\",\n              subType: _scopeBits[0],\n              atts: {\n                role: _scopeBits[1],\n                alignment: _scopeBits[2],\n                nCols: parseInt(_scopeBits[3])\n              }\n            };\n            environment.context.sequences[0].element = _wrapper6;\n            if (item.subType === 'start') {\n              environment.context.sequences[0].block.wrappers.unshift(_wrapper6.subType);\n              this.renderEvent('startWrapper', environment);\n            } else {\n              this.renderEvent('endWrapper', environment);\n              environment.context.sequences[0].block.wrappers.shift();\n            }\n            delete environment.context.sequences[0].element;\n          } else if (_scopeBits[0] === 'milestone' && item.subType === \"start\") {\n            if (_scopeBits[1] === 'ts') {\n              var _mark = {\n                type: \"mark\",\n                subType: \"usfm:\" + camelCaseToSnakeCase(_scopeBits[1]),\n                atts: {}\n              };\n              environment.context.sequences[0].element = _mark;\n              this.renderEvent('mark', environment);\n              delete environment.context.sequences[0].element;\n            } else {\n              this._container = {\n                type: \"start_milestone\",\n                subType: \"usfm:\" + camelCaseToSnakeCase(_scopeBits[1]),\n                atts: {}\n              };\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"maybeRenderText\",\n    value: function maybeRenderText(environment) {\n      if (this._tokens.length === 0) {\n        return;\n      }\n      var elementContext = {\n        type: 'text',\n        text: this._tokens.join('')\n      };\n      environment.context.sequences[0].element = elementContext;\n      this._tokens = [];\n      this.renderEvent('text', environment);\n      delete environment.context.sequences[0].element;\n    }\n  }, {\n    key: \"renderContainer\",\n    value: function renderContainer(environment) {\n      if (this._container.type === \"wrapper\") {\n        var direction = this._container.direction;\n        delete this._container.direction;\n        if (direction === 'start') {\n          environment.context.sequences[0].element = this._container;\n          environment.context.sequences[0].block.wrappers.unshift(this._container.subType);\n          this.renderEvent('startWrapper', environment);\n          delete environment.context.sequences[0].element;\n        } else {\n          environment.context.sequences[0].element = this._container;\n          this.renderEvent('endWrapper', environment);\n          environment.context.sequences[0].block.wrappers.shift();\n          delete environment.context.sequences[0].element;\n        }\n      } else if (this._container.type === \"start_milestone\") {\n        environment.context.sequences[0].element = this._container;\n        this.renderEvent('startMilestone', environment);\n        delete environment.context.sequences[0].element;\n      } else if (this._container.type === \"end_milestone\") {\n        environment.context.sequences[0].element = this._container;\n        this.renderEvent('endMilestone', environment);\n        delete environment.context.sequences[0].element;\n      }\n      this._container = null;\n    }\n  }]);\n  return SofriaRenderFromProskomma;\n}(ProskommaRender);\nexport default SofriaRenderFromProskomma;","map":{"version":3,"names":["ProskommaRender","require","camelCaseToSnakeCase","s","ret","c","split","toUpperCase","toLowerCase","push","join","SofriaRenderFromProskomma","_ProskommaRender","_inherits","_super","_createSuper","spec","_this","_classCallCheck","call","proskomma","Error","pk","_tokens","_container","cachedSequenceIds","sequences","currentCV","chapter","verses","_createClass","key","value","renderDocument1","_ref","docId","config","context","workspace","output","environment","renderer","documentResult","gqlQuerySync","docSetId","data","document","mainId","mainSequence","id","nSequences","nbBlock","seq","headers","header","docSetResult","selectors","selector","docSet","schema","metadata","translation","properties","tags","_objectSpread","mainSequenceId","chapters","length","displayPartOfText","includes","state","renderEvent","unshift","renderSequence","shift","sequenceContext","sequence","sequenceId","type","nBlocks","milestones","Set","sequenceType","currentChapter","currentChapterContext","blocksIdsToRender","blockId","console","log","numberBlockTorender","pop","i","cIndex","startBlock","endBlock","sort","a","b","outputBlockN","inputBlockN","blocksResult","blockResult","blocks","blockGraft","bg","block","subType","blockN","payload","subTypeValues","bs","subTypeValue","wrappers","wrapper","atts","number","element","renderContent","items","renderItem","maybeRenderText","item","startsWith","scopeBits","direction","renderContainer","replace","graft","cvMark","mark","role","alignment","nCols","parseInt","elementContext","text"],"sources":["/home/gabriel/repos/jxt-korennumi/components/used/SofiraRenderFromProskommaNew.js"],"sourcesContent":["const ProskommaRender = require('./ProskommaRender');\n\nconst camelCaseToSnakeCase = s => {\n    const ret = [];\n    for (const c of s.split(\"\")) {\n        if (c.toUpperCase() === c && c.toLowerCase() !== c) {\n            ret.push(`_${c.toLowerCase()}`);\n        } else {\n            ret.push(c);\n        }\n    }\n    return ret.join(\"\");\n}\n\nclass SofriaRenderFromProskomma extends ProskommaRender {\n\n    constructor(spec) {\n        super(spec);\n        if (!spec.proskomma) {\n            throw new Error(`No Proskomma`)\n        }\n        this.pk = spec.proskomma;\n        this._tokens = [];\n        this._container = null;\n        this.cachedSequenceIds = [];\n        this.sequences = null;\n        this.currentCV = {\n            chapter: null,\n            verses: null\n        }\n    }\n    renderDocument1({ docId, config, context, workspace, output }) {\n        const environment = { config, context, workspace, output };\n        context.renderer = this;\n        const documentResult = this.pk.gqlQuerySync(`{\n          document(id: \"${docId}\") {\n            docSetId\n            mainSequence { id }\n            nSequences\n            sequences {\n              id\n              type\n              nBlocks\n            }\n            headers {\n              key\n              value\n            }\n          } \n        }`);\n        const docSetId = documentResult.data.document.docSetId;\n        const mainId = documentResult.data.document.mainSequence.id;\n        const nSequences = documentResult.data.document.nSequences;\n        this.sequences = {};\n        if (!environment.nbBlock) {\n            environment.config.nbBlock = 1000;\n        }\n        for (const seq of documentResult.data.document.sequences) {\n            this.sequences[seq.id] = seq;\n        }\n        const headers = {};\n        for (const header of documentResult.data.document.headers) {\n            headers[header.key] = header.value;\n        }\n        const docSetResult = this.pk.gqlQuerySync(`{docSet(id: \"${docSetId}\") {selectors {key value}}}`);\n        const selectors = {};\n        for (const selector of docSetResult.data.docSet.selectors) {\n            selectors[selector.key] = selector.value;\n        }\n        context.document = {\n            id: docId,\n            schema: {\n                \"structure\": \"nested\",\n                \"structure_version\": \"0.2.1\",\n                \"constraints\": [\n                    {\n                        \"name\": \"sofria\",\n                        \"version\": \"0.2.1\"\n                    }\n                ]\n            },\n\n            metadata: {\n                translation: {\n                    id: docSetId,\n                    selectors,\n                    properties: {},\n                    tags: []\n                },\n                document: {\n                    ...headers,\n                    properties: {},\n                    tags: []\n                }\n            },\n            mainSequenceId: mainId,\n            nSequences,\n        };\n        if (config.chapters) {\n            if (workspace.chapters) {\n                if (workspace.chapters.length === 0) {\n                    workspace.chapters = config.chapters\n                }\n            }\n            else {\n                workspace.chapters = config.chapters\n            }\n        }\n        if (workspace.chapters) {\n            context.document.metadata.document.properties.chapters = workspace.chapters[0];\n        }\n        context.sequences = [{}];\n\n        if (config.displayPartOfText != null) {\n            if (!['begin', 'continue'].includes(config.displayPartOfText.state)) {\n                throw new Error(`state must be typeof string and one of ['begin','continue']`);\n            }\n        }\n\n        if (environment.config.displayPartOfText != null) {\n            if (environment.config.displayPartOfText.state === 'begin') {\n\n                this.renderEvent('startDocument', environment);\n            }\n\n        }\n        else {\n            this.renderEvent('startDocument', environment);\n        }\n\n\n        this.cachedSequenceIds.unshift(mainId);\n        this.renderSequence(environment);\n        this.cachedSequenceIds.shift();\n        this.renderEvent('endDocument', environment);\n\n    }\n\n    sequenceContext(sequence, sequenceId) {\n        return {\n            id: sequenceId,\n            type: camelCaseToSnakeCase(sequence.type),\n            nBlocks: sequence.nBlocks,\n            milestones: new Set([]),\n        }\n    }\n\n    renderSequence(environment) {\n\n        const context = environment.context;\n        const sequenceId = this.cachedSequenceIds[0];\n        const sequenceType = this.pk.gqlQuerySync(`{document(id: \"${context.document.id}\") {sequence(id:\"${sequenceId}\") {type} } }`).data.document.sequence.type;\n        let documentResult = {};\n        let currentChapter = null\n        let currentChapterContext = null\n        let blocksIdsToRender = []\n        if (sequenceType === 'main') {\n            if (environment.workspace.blockId) {\n                blocksIdsToRender = environment.workspace.blockId\n                console.log(blocksIdsToRender)\n\n            }\n        }\n\n        let numberBlockTorender = 0\n        if (sequenceType === 'main') {\n            if (environment.workspace.chapters) {\n                while (environment.workspace.chapters.length != 0) {\n                    currentChapter = environment.workspace.chapters.pop();\n                    if (currentChapter) {\n                        currentChapterContext = this.pk.gqlQuerySync(`{document(id: \"${context.document.id}\") {cIndex(chapter: ${currentChapter}) {\n                startBlock\n                endBlock\n              }}}`)\n\n                    }\n\n                    if (currentChapter && currentChapterContext) {\n                        for (let i = currentChapterContext.data.document.cIndex.startBlock; i < currentChapterContext.data.document.cIndex.endBlock + 1; i++) {\n                            blocksIdsToRender.push(i);\n\n                        }\n\n                    }\n                    environment.workspace.blockId = blocksIdsToRender;\n                }\n            }\n            else {\n                for (let i = 0; i < this.pk.gqlQuerySync(`{document(id: \"${context.document.id}\") {sequence(id:\"${sequenceId}\") {nBlocks} }}`).data.document.sequence.nBlocks; i++) {\n                    blocksIdsToRender.push(i);\n                }\n            }\n            blocksIdsToRender.sort((a, b) => (b - a));\n\n            if (!environment.nbBlock) {\n                environment.nbBlock = null;\n            }\n\n\n            if (!environment.config.nbBlock) {\n\n                environment.config.nbBlock = blocksIdsToRender.length;\n            }\n\n        }\n        else {\n            for (let i = 0; i < this.pk.gqlQuerySync(`{document(id: \"${context.document.id}\") {sequence(id:\"${sequenceId}\") {nBlocks} }}`).data.document.sequence.nBlocks; i++) {\n                blocksIdsToRender.push(i);\n            }\n        }\n\n        if (sequenceType === 'main') {\n            numberBlockTorender = environment.config.nbBlock;\n        }\n        else {\n            numberBlockTorender = blocksIdsToRender.length;\n        }\n        documentResult = this.pk.gqlQuerySync(`{document(id: \"${context.document.id}\") {id sequence(id:\"${sequenceId}\") {id type nBlocks blocks(positions: [${blocksIdsToRender}]){ os {payload} is {payload} } } } }`);\n        const sequence = documentResult.data.document.sequence;\n\n        if (!sequence) {\n            throw new Error(`Sequence '${sequenceId}' not found in renderSequenceId()`);\n        }\n        if (environment.config.displayPartOfText != null) {\n            if (environment.config.displayPartOfText != 'continue') {\n                context.sequences.unshift(this.sequenceContext(sequence, sequenceId));\n            }\n        }\n        else {\n            context.sequences.unshift(this.sequenceContext(sequence, sequenceId));\n        }\n\n\n        this.renderEvent('startSequence', environment);\n        let outputBlockN = 0;\n\n        for (let i = 0; i < numberBlockTorender; i++) {\n\n            if (blocksIdsToRender.length != 0) {\n                let inputBlockN = {}\n                if (sequenceType === 'main') {\n                    inputBlockN = blocksIdsToRender.pop();\n                }\n                else {\n                    inputBlockN = blocksIdsToRender.pop();\n\n                }\n                const blocksResult = this.pk.gqlQuerySync(\n                    `{\n               document(id: \"${context.document.id}\") {\n                 sequence(id:\"${sequenceId}\") {\n                   blocks(positions:${inputBlockN}) {\n                     bg {subType payload}\n                     bs {payload}\n                     items {type subType payload}\n                   }\n                 }\n               }\n             }`\n                );\n                const blockResult = blocksResult.data.document.sequence.blocks[0];\n                for (const blockGraft of blockResult.bg) {\n                    context.sequences[0].block = {\n                        type: \"graft\",\n                        subType: camelCaseToSnakeCase(blockGraft.subType),\n                        blockN: outputBlockN,\n                        sequence: this.sequences[blockGraft.payload]\n                    }\n                    this.cachedSequenceIds.unshift(blockGraft.payload);\n                    this.renderEvent('blockGraft', environment);\n                    this.cachedSequenceIds.shift();\n                    outputBlockN++;\n                }\n\n                const subTypeValues = blockResult.bs.payload.split('/');\n\n                let subTypeValue;\n                if (subTypeValues[1] && [\"tr\", \"zrow\"].includes(subTypeValues[1])) {\n\n                    subTypeValue = (subTypeValues[1] === \"tr\" ? \"usfm:tr\" : \"pk\");\n                } else if (subTypeValues[1]) {\n                    subTypeValue = `usfm:${subTypeValues[1]}`;\n                } else {\n                    subTypeValue = subTypeValues[0];\n                }\n                context.sequences[0].block = {\n                    type: [\"usfm:tr\", \"pk\"].includes(subTypeValue) ? \"row\" : \"paragraph\",\n                    subType: subTypeValue,\n                    blockN: outputBlockN,\n                    wrappers: []\n                }\n                if (context.sequences[0].block.type === \"row\") {\n                    this.renderEvent('startRow', environment);\n                } else {\n                    this.renderEvent('startParagraph', environment);\n                }\n                this._tokens = [];\n                if (sequenceType === \"main\" && this.currentCV.chapter) {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: 'chapter',\n                        atts: {\n                            number: this.currentCV.chapter\n                        }\n                    };\n                    environment.context.sequences[0].element = wrapper;\n                    environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                    this.renderEvent('startWrapper', environment);\n                }\n                if (sequenceType === \"main\" && this.currentCV.verses) {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: 'verses',\n                        atts: {\n                            number: this.currentCV.verses\n                        }\n                    };\n                    environment.context.sequences[0].element = wrapper;\n                    environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                    this.renderEvent('startWrapper', environment);\n                }\n                this.renderContent(blockResult.items, environment);\n                this._tokens = [];\n                if (sequenceType === \"main\" && this.currentCV.verses) {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: 'verses',\n                        atts: {\n                            number: this.currentCV.verses\n                        }\n                    };\n                    environment.context.sequences[0].element = wrapper;\n                    environment.context.sequences[0].block.wrappers.shift();\n                    this.renderEvent('endWrapper', environment);\n                }\n                if (sequenceType === \"main\" && this.currentCV.chapter) {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: 'chapter',\n                        atts: {\n                            number: this.currentCV.chapter\n                        }\n                    };\n                    environment.context.sequences[0].element = wrapper;\n                    environment.context.sequences[0].block.wrappers.shift();\n                    this.renderEvent('endWrapper', environment);\n                }\n                if (context.sequences[0].block.type === \"row\") {\n                    this.renderEvent('endRow', environment);\n                } else {\n                    this.renderEvent('endParagraph', environment);\n                }\n                delete context.sequences[0].block;\n                outputBlockN++;\n            }\n        }\n        this.renderEvent('endSequence', environment);\n        if (sequenceType === 'main') {\n\n            environment.workspace.blockId = blocksIdsToRender\n        }\n        context.sequences.shift();\n\n    }\n\n    renderContent(items, environment) {\n        for (let i = 0; i < items.length; i++) {\n\n            this.renderItem(items[i], environment);\n\n        }\n        this.maybeRenderText(environment);\n    }\n\n    renderItem(item, environment) {\n        if (item.type === 'scope' && item.payload.startsWith('attribute')) {\n            const scopeBits = item.payload.split('/');\n            if (item.subType === \"start\") {\n                if (!this._container) {\n                    this._container = {\n                        direction: \"start\",\n                        subType: `usfm:w`,\n                        type: \"wrapper\",\n                        atts: {}\n                    };\n                }\n                if (scopeBits[3] in this._container.atts) {\n                    this._container.atts[scopeBits[3]].push(scopeBits[5]);\n                } else {\n                    this._container.atts[scopeBits[3]] = [scopeBits[5]];\n                }\n            } else {\n                if (!this._container) {\n                    this._container = {\n                        direction: \"end\",\n                        subType: `usfm:${camelCaseToSnakeCase(scopeBits[2])}`,\n                    };\n                    if (scopeBits[1] === 'milestone') {\n                        this._container.type = \"end_milestone\";\n                    } else {\n                        this._container.type = \"wrapper\";\n                        this._container.atts = {};\n                    }\n                }\n            }\n        } else {\n            if (this._container) {\n\n                this.maybeRenderText(environment);\n                this.renderContainer(environment);\n                if (item.payload.includes(\"spanWith\")) {\n                    this.maybeRenderText(environment);\n                    return;\n                }\n            }\n            if (item.type === 'token') {\n                this._tokens.push(item.payload.replace(/\\s+/g, \" \"));\n            } else if (item.type === \"graft\") {\n                this.maybeRenderText(environment);\n                const graft = {\n                    type: \"graft\",\n                    subType: camelCaseToSnakeCase(item.subType),\n                    sequence: this.sequences[item.payload],\n                };\n                environment.context.sequences[0].element = graft;\n                this.cachedSequenceIds.unshift(item.payload);\n                this.renderEvent('inlineGraft', environment);\n                this.cachedSequenceIds.shift();\n                delete environment.context.sequences[0].element;\n\n            } else { // scope\n                this.maybeRenderText(environment);\n                const scopeBits = item.payload.split('/');\n                if ([\"chapter\", \"verses\"].includes(scopeBits[0])) {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: camelCaseToSnakeCase(scopeBits[0]),\n                        atts: {\n                            number: scopeBits[1]\n                        }\n                    };\n                    environment.context.sequences[0].element = wrapper;\n                    if (item.subType === 'start') {\n                        this.currentCV[scopeBits[0]] = scopeBits[1];\n                        environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                        this.renderEvent(`start${scopeBits[0] === \"chapter\" ? \"Chapter\" : \"Verses\"}`, environment)\n                        this.renderEvent('startWrapper', environment);\n                        const cvMark = {\n                            \"type\": \"mark\",\n                            \"subType\": `${scopeBits[0]}_label`,\n                            \"atts\": {\n                                \"number\": scopeBits[1]\n                            }\n                        };\n                        environment.context.sequences[0].element = cvMark;\n                        this.renderEvent('mark', environment);\n                        environment.context.sequences[0].element = wrapper;\n                    } else {\n                        this.renderEvent('endWrapper', environment);\n                        this.renderEvent(`end${scopeBits[0] === \"chapter\" ? \"Chapter\" : \"Verses\"}`, environment)\n\n                        environment.context.sequences[0].block.wrappers.shift();\n                        delete environment.context.sequences[0].element;\n                        this.currentCV[scopeBits[0]] = null;\n                    }\n                } else if ([\"pubChapter\", \"pubVerse\", \"altChapter\", \"altVerse\"].includes(scopeBits[0])) {\n                    if (item.subType === 'start') {\n                        const mark = {\n                            type: \"mark\",\n                            subType: camelCaseToSnakeCase(scopeBits[0]),\n                            atts: {\n                                number: scopeBits[1]\n                            }\n                        };\n                        environment.context.sequences[0].element = mark;\n                        this.renderEvent('mark', environment);\n                        delete environment.context.sequences[0].element;\n                    }\n                } else if (scopeBits[0] === 'span') {\n                    const wrapper = {\n                        type: \"wrapper\",\n                        subType: `usfm:${scopeBits[1]}`,\n                        atts: {}\n                    };\n\n                    environment.context.sequences[0].element = wrapper;\n                    if (item.subType === 'start') {\n                        environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                        this.renderEvent('startWrapper', environment);\n                    } else {\n                        this.renderEvent('endWrapper', environment);\n                        environment.context.sequences[0].block.wrappers.shift();\n                    }\n                    delete environment.context.sequences[0].element;\n                } else if (scopeBits[0] === 'spanWithAtts') {\n\n                    if (item.subType === 'start') {\n                        this._container = {\n                            direction: \"start\",\n                            type: \"wrapper\",\n                            subType: `usfm:${scopeBits[1]}`,\n                            atts: {}\n                        };\n                    }\n                    else {\n                        const wrapper = {\n                            type: \"wrapper\",\n                            subType: `usfm:${scopeBits[1]}`,\n                            atts: {}\n                        };\n                        if (item.payload.includes(\"spanWith\")) {\n                        }\n                        environment.context.sequences[0].element = wrapper;\n                        this.renderEvent('endWrapper', environment);\n                        environment.context.sequences[0].block.wrappers.shift();\n                    }\n\n\n\n                } else if (scopeBits[0] === 'cell') {\n                    const wrapper = {\n                        direction: \"start\",\n                        type: \"wrapper\",\n                        subType: scopeBits[0],\n                        atts: {\n                            role: scopeBits[1],\n                            alignment: scopeBits[2],\n                            nCols: parseInt(scopeBits[3])\n                        }\n                    };\n                    environment.context.sequences[0].element = wrapper;\n\n                    if (item.subType === 'start') {\n                        environment.context.sequences[0].block.wrappers.unshift(wrapper.subType);\n                        this.renderEvent('startWrapper', environment);\n                    } else {\n                        this.renderEvent('endWrapper', environment);\n                        environment.context.sequences[0].block.wrappers.shift();\n                    }\n                    delete environment.context.sequences[0].element;\n                } else if (scopeBits[0] === 'milestone' && item.subType === \"start\") {\n                    if (scopeBits[1] === 'ts') {\n                        const mark = {\n                            type: \"mark\",\n                            subType: `usfm:${camelCaseToSnakeCase(scopeBits[1])}`,\n                            atts: {}\n                        };\n                        environment.context.sequences[0].element = mark;\n                        this.renderEvent('mark', environment);\n                        delete environment.context.sequences[0].element;\n                    } else {\n                        this._container = {\n                            type: \"start_milestone\",\n                            subType: `usfm:${camelCaseToSnakeCase(scopeBits[1])}`,\n                            atts: {}\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    maybeRenderText(environment) {\n        if (this._tokens.length === 0) {\n            return;\n        }\n        const elementContext = {\n            type: 'text',\n            text: this._tokens.join(''),\n        };\n        environment.context.sequences[0].element = elementContext;\n        this._tokens = [];\n        this.renderEvent('text', environment);\n        delete environment.context.sequences[0].element;\n    }\n\n    renderContainer(environment) {\n        if (this._container.type === \"wrapper\") {\n            const direction = this._container.direction;\n            delete this._container.direction;\n            if (direction === 'start') {\n                environment.context.sequences[0].element = this._container;\n                environment.context.sequences[0].block.wrappers.unshift(this._container.subType);\n                this.renderEvent('startWrapper', environment);\n                delete environment.context.sequences[0].element;\n\n            } else {\n                environment.context.sequences[0].element = this._container;\n                this.renderEvent('endWrapper', environment);\n                environment.context.sequences[0].block.wrappers.shift();\n                delete environment.context.sequences[0].element;\n\n            }\n        } else if (this._container.type === \"start_milestone\") {\n            environment.context.sequences[0].element = this._container;\n            this.renderEvent('startMilestone', environment);\n            delete environment.context.sequences[0].element;\n        } else if (this._container.type === \"end_milestone\") {\n            environment.context.sequences[0].element = this._container;\n            this.renderEvent('endMilestone', environment);\n            delete environment.context.sequences[0].element;\n        }\n        this._container = null;\n    }\n\n}\nexport default SofriaRenderFromProskomma;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}