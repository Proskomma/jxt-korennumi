{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport SofriaRenderFromProskomma from \"../components/used/SofiraRenderFromProskommaNew\";\nimport sofria2WebActions from \"../renderer/sofria2web\";\nimport { renderers } from \"../renderer/render2reactNative\";\nfunction useRenderDocument(documentResult, pk) {\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    output = _useState2[0],\n    setOutput = _useState2[1];\n  useEffect(function () {\n    if (documentResult) {\n      var renderer = new SofriaRenderFromProskomma({\n        proskomma: pk,\n        actions: sofria2WebActions,\n        debugLevel: 1\n      });\n      var state = 'begin';\n      var config = {\n        showWordAtts: false,\n        showTitles: true,\n        showHeadings: true,\n        showIntroductions: true,\n        showFootnotes: true,\n        showXrefs: true,\n        showParaStyles: true,\n        showCharacterMarkup: true,\n        showChapterLabels: true,\n        showVersesLabels: true,\n        selectedBcvNotes: [],\n        displayPartOfText: {\n          state: state\n        },\n        bcvNotesCallback: function bcvNotesCallback(bcv) {\n          setBcvNoteRef(bcv);\n        },\n        renderers: renderers\n      };\n      try {\n        renderer.renderDocument({\n          docId: documentResult.data.document.id,\n          config: config,\n          output: output\n        });\n      } catch (err) {\n        console.log(\"Renderer\", err);\n        throw err;\n      }\n      setData(output.slice(0, 10));\n    }\n  }, [documentResult]);\n  return output;\n}\nexport { useRenderDocument };","map":{"version":3,"names":["useState","useEffect","SofriaRenderFromProskomma","sofria2WebActions","renderers","useRenderDocument","documentResult","pk","_useState","_useState2","_slicedToArray","output","setOutput","renderer","proskomma","actions","debugLevel","state","config","showWordAtts","showTitles","showHeadings","showIntroductions","showFootnotes","showXrefs","showParaStyles","showCharacterMarkup","showChapterLabels","showVersesLabels","selectedBcvNotes","displayPartOfText","bcvNotesCallback","bcv","setBcvNoteRef","renderDocument","docId","data","document","id","err","console","log","setData","slice"],"sources":["/home/gabriel/repos/jxt-korennumi/customHooks/useRenderDocument.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport SofriaRenderFromProskomma from '../components/used/SofiraRenderFromProskommaNew';\nimport sofria2WebActions from '../renderer/sofria2web';\nimport { renderers } from '../renderer/render2reactNative';\n\nfunction useRenderDocument(documentResult, pk) {\n    const [output, setOutput] = useState({})\n    useEffect(() => {\n        if (documentResult) {\n\n            const renderer = new SofriaRenderFromProskomma({\n                proskomma: pk,\n                actions: sofria2WebActions,\n                debugLevel: 1\n\n            });\n            const state = 'begin';\n            const config = {\n\n                showWordAtts: false,\n                showTitles: true,\n                showHeadings: true,\n                showIntroductions: true,\n                showFootnotes: true,\n                showXrefs: true,\n                showParaStyles: true,\n                showCharacterMarkup: true,\n                showChapterLabels: true,\n                showVersesLabels: true,\n                selectedBcvNotes: [],\n                displayPartOfText: { state },\n                bcvNotesCallback: (bcv) => {\n                    setBcvNoteRef(bcv);\n                },\n                renderers,\n            };\n\n            try {\n\n                renderer.renderDocument({\n                    docId: documentResult.data.document.id,\n                    config,\n                    output,\n                });\n\n            } catch (err) {\n                console.log(\"Renderer\", err);\n                throw err;\n            }\n            setData(output.slice(0, 10))\n        }\n    }, [documentResult])\n    return output\n}\n\nexport { useRenderDocument }"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,yBAAyB;AAChC,OAAOC,iBAAiB;AACxB,SAASC,SAAS;AAElB,SAASC,iBAAiBA,CAACC,cAAc,EAAEC,EAAE,EAAE;EAC3C,IAAAC,SAAA,GAA4BR,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjCG,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EACxBR,SAAS,CAAC,YAAM;IACZ,IAAIK,cAAc,EAAE;MAEhB,IAAMO,QAAQ,GAAG,IAAIX,yBAAyB,CAAC;QAC3CY,SAAS,EAAEP,EAAE;QACbQ,OAAO,EAAEZ,iBAAiB;QAC1Ba,UAAU,EAAE;MAEhB,CAAC,CAAC;MACF,IAAMC,KAAK,GAAG,OAAO;MACrB,IAAMC,MAAM,GAAG;QAEXC,YAAY,EAAE,KAAK;QACnBC,UAAU,EAAE,IAAI;QAChBC,YAAY,EAAE,IAAI;QAClBC,iBAAiB,EAAE,IAAI;QACvBC,aAAa,EAAE,IAAI;QACnBC,SAAS,EAAE,IAAI;QACfC,cAAc,EAAE,IAAI;QACpBC,mBAAmB,EAAE,IAAI;QACzBC,iBAAiB,EAAE,IAAI;QACvBC,gBAAgB,EAAE,IAAI;QACtBC,gBAAgB,EAAE,EAAE;QACpBC,iBAAiB,EAAE;UAAEb,KAAK,EAALA;QAAM,CAAC;QAC5Bc,gBAAgB,EAAE,SAAAA,iBAACC,GAAG,EAAK;UACvBC,aAAa,CAACD,GAAG,CAAC;QACtB,CAAC;QACD5B,SAAS,EAATA;MACJ,CAAC;MAED,IAAI;QAEAS,QAAQ,CAACqB,cAAc,CAAC;UACpBC,KAAK,EAAE7B,cAAc,CAAC8B,IAAI,CAACC,QAAQ,CAACC,EAAE;UACtCpB,MAAM,EAANA,MAAM;UACNP,MAAM,EAANA;QACJ,CAAC,CAAC;MAEN,CAAC,CAAC,OAAO4B,GAAG,EAAE;QACVC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,GAAG,CAAC;QAC5B,MAAMA,GAAG;MACb;MACAG,OAAO,CAAC/B,MAAM,CAACgC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAChC;EACJ,CAAC,EAAE,CAACrC,cAAc,CAAC,CAAC;EACpB,OAAOK,MAAM;AACjB;AAEA,SAASN,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}